{"version":3,"sources":["Game.js","components/CoinCarbon.js","components/CompanyHandLayout/companyCellNames.js","components/CoinMoney.js","components/CompanyCard.js","constants/companyDeck.js","constants/carbonDeck.js","components/TeamHandLayout/TeamCellNames.js","constants/teamDeck.js","components/NamePlate.js","components/CompanyStack.js","components/DragItem.js","components/CompanyHand.js","components/CarbonEventCard.js","components/CarbonValue.js","components/TeamCard.js","components/TestCellDnd/IsCard.js","components/CompanyCard3/Coin.js","components/CompanyCard3/SourceBox.js","components/TeamHandLayout/TeamHand.js","components/CompanyHandLayout/PlayerHand.js","components/TestCellDnd/Board.js","components/Card.js","components/CarbonEventCard2.js","components/Doit.js","NZGBoard.js","App.js","reportWebVitals.js","index.js"],"names":["topCard","findIndex","useStyles","makeStyles","theme","mainSection","display","fontSize","width","height","alignItems","justifyContent","CoinCarbon","item","children","classes","Box","className","actualCarbon","CELL_NAMES","borderRadius","border","backImage","backgroundImage","process","svgmain","backgroundPosition","backgroundSize","backgroundRepeat","margin","valuesMain","synergyMain","actualValues","marginLeft","marginTop","paddingTop","carbonActual","backgroundColor","carbonDropAct","carbonActualText","color","fontWeight","valueActual","valueActualText","initialValues","initialCarbon","initialValue","initialCarbonText","initialValueText","synLeft","synMid","synLeftText","synMidText","companyName","directionValue1","directionValue2","directionValue3","directionValue4","companyDeck","id","order","idValue","direction","synmain","name","type","actualValue","companyBank","cell","carbonDeck","frontImage","event1","text","coinRaise","carbonRaise","synergy","event2","teamDeck","minSignBid","reduceCarb","changeEvent","counter","currentId","Game","setup","ctx","G","deck","players","currentCarbon","temperatureIncrease","bid","minBid","goldBank","silverBank","coinBank","carbonBank","concat","random","Shuffle","j","numPlayers","score","handCompanyDeck","handCarbonDeck","handTeamDeck","bank","coin","coinsCopy","carbonCoins","teamMembers","currentBid","console","log","phases","draw","turn","moveLimit","moves","IncreaseCoin","idCard","DecreaseCoin","InitialDraw","i","shift","currentPlayer","push","events","endTurn","DiscardCompany","find","splice","length","DiscardTeam","endIf","start","next","pickEvent","DrawCarbonEventCard","PickCarbonEvent","playerID","counterEvent","counterEventGRO","companyMarket","sellCompany","bidForCompany","takeOverCompany","root","alignContent","zIndex","avatarNumber2","avatarNumber1","avatarNumber3","avatarNumber4","nameSection","nameText","textAlign","coinImg","coinsImg","carbonImg","teamImg","coinValue","NamePlate","playerId","avatarId","position","join","cardDirectionClass","React","Component","card","backCarbon","pic","frontCarbon","CarbonEventCard","useState","event","setEvent","onClick","TeamCard","Coin","setValue","value","setItems","ref","useRef","useDrop","accept","drop","useDrag","end","collect","monitor","isDragging","drag","useMemo","opacity","CompanyCard3","_item","isOver","isOverCurrent","paddingLeft","bankFlex","companyBankFlex","marginBottom","MovableItem","index","currentCellName","moveCardHandler","changeItemCell","currentItem","cellName","prevState","map","e","dropResult","getDropResult","cellId","l","style","Cell","title","ID","canDrop","TeamHand","items","window","innerWidth","dragIndex","hoverIndex","dragItem","copiedStateArray","prevItem","returnItemsForCell","filter","f1","f2","f3","f4","f5","f6","f7","f0","e0","g1","g2","g3","g4","g5","g6","g7","g0","h1","h2","h3","h4","h5","h6","h7","h0","i1","i2","i3","i4","i5","i6","i7","i0","bankId","cellsList","mapBank","PlayerHand","a1","a2","a3","a4","a5","a6","a7","a8","a9","a0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b0","c1","c2","c3","c4","c5","c6","c7","c8","c9","c0","d1","d2","d3","d4","d5","d6","d7","d8","d9","d0","bidCoinCellPlace","mapCompanyBank","bidCell","ItemTypes","CategoryTreeFork","componentWillReceiveProps","nextProps","this","props","connectDragSource","connectDropTarget","targetSpec","component","getItem","hover","Card","DragSource","beginDrag","connect","dragSource","DropTarget","dropTarget","mt","mr","Front","Back","src","img","alt","ImageArea","MainArea","toString","Doit","background","auction","App","Client","game","board","isMobile","DndProvider","backend","TouchBackend","HTML5Backend","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e5274ee.chunk.js","sourcesContent":["import {useState} from 'react'\nimport {companyDeck} from \"./constants/companyDeck\"\nimport {carbonDeck} from \"./constants/carbonDeck\"\nimport {teamDeck} from \"./constants/teamDeck\"\nimport {keys} from \"@material-ui/core/styles/createBreakpoints\";\n\n// const getLength = (G,ctx) =>{\n//     let lengthOfCom = G.players[0].handCompanyDeck.length;\n//     return lengthOfCom;\n// };\n// export default getLength;\n\n// function DrawCard(G, ctx) {\n//     G.deck--;\n//     G.hand[ctx.currentPlayer]++;\n// }\n//\n// function PlayCard(G, ctx) {\n//     G.deck++;\n//     G.hand[ctx.currentPlayer]--;\n// }\n//\n// export const Game = {\n//     setup: ctx => ({ deck: 6, hand: Array(ctx.numPlayers).fill(0) }),\n//     moves: { DrawCard, PlayCard },\n//     turn: { moveLimit: 1 },\n// };\n\n// function DrawCard(G, ctx) {\n//     G.companyDeck--;\n//     G.hand[ctx.currentPlayer]++;\n//     G.bank.coin[ctx.currentPlayer]++;\n//\n// }\n\n// function PlayCard(G, ctx) {\n//     G.companyDeck++;\n//     G.hand[ctx.currentPlayer]--;\n// }\n\nexport function getInitialState(ctx) {\n\n    const G = {\n        deck: [],\n        players: [],\n        carbonDeck: [],\n        currentCarbon: [],\n        teamDeck: [],\n        companyDeck: [],\n        temperatureIncrease: 0,\n        bid: 0,\n        minBid: 0,\n        goldBank: 10,\n        silverBank: 30,\n        coinBank: 100,\n        carbonBank: 30,\n    };\n\n    // Add a deck for every player\n    // for (let i = 0; i < ctx.numPlayers; i++) {\n    G.companyDeck = G.companyDeck.concat(companyDeck);\n    G.carbonDeck = G.carbonDeck.concat(carbonDeck);\n    G.teamDeck = G.teamDeck.concat(teamDeck);\n    // }\n\n    // console.log(ctx.currentPlayer);\n    // Shuffle resulting deck using lodash\n    // G.companyDeck = ctx.random.Shuffle(G.companyDeck);\n    G.carbonDeck = ctx.random.Shuffle(G.carbonDeck);\n    G.teamDeck = ctx.random.Shuffle(G.teamDeck);// TODO: Use boardgame.io provided random shuffle function, which will be important when we are running a server\n\n    // Set up the game state for each player\n    for (let j = 0; j < ctx.numPlayers; j++) {\n        G.players[j] = {\n            score: 0,\n            handCompanyDeck: [],\n            handCarbonDeck: [],\n            handTeamDeck: [],\n            bank: {\n                coin: 15,\n                coinsCopy: 15,\n                carbonCoins: 0,\n                teamMembers: 0\n            },\n            currentBid: 0,\n        };\n    }\n    // topCard = G.carbonDeck.shift();\n    // G.currentCarbon.push(topCard);\n    //\n    // for (let i = 0; i < 4; i++) {\n    //     for (let k = 0; k < 3; k++) {\n    //         topCard = G.companyDeck.shift();\n    //         G.players[i].handCompanyDeck.push(topCard);\n    //     }\n    //\n    //\n    // }\n    //\n    // for (let i = 0; i < 2; i++) {\n    //     for (let k = 0; k < 4; k++) {\n    //         topCard = G.teamDeck.shift();\n    //         G.players[k].handTeamDeck.push(topCard);\n    //     }\n    // }\n\n\n    // For debugging \"game over\" state– this sets the deck to only have a single card\n    // G.deck = new Array(G.deck[0]);\n\n    console.log(\"Initial Game State\", G, \"Initial ctx\", ctx);\n\n    // Our game state is ready to go– return it!\n    return G;\n}\n\nlet topCard;\nlet findIndex;\n\n\nexport const currentId = [];\n\nexport const Game  = {\n\n\n\n    name: \"NetZeroGame\",\n\n    setup: getInitialState,\n    // moves: {\n    //     PlayCompany: (G, ctx, props) => {\n    //         topCard = G.players[ctx.currentPlayer].handCompanyDeck.shift();\n    //         G.companyDeck.push(topCard);\n    //     },\n    // },\n    phases: {\n        draw: {\n            turn: {moveLimit: 3},\n            moves: {\n                IncreaseCoin: (G,ctx,name,idCard) => {\n                    // alert(name) ;\n                    // console.log({name})\n                    // console.log(G.companyDeck[idCard-1].actualValue)\n                    ++G.companyDeck[idCard-1].actualValue\n                    // console.log(G.companyDeck[idCard-1].actualValue)\n\n                    // topCard=G.companyDeck[idCard-1].order===idCard\n                    // console.log({topCard})\n\n\n                    // G.companyDeck[1].actualValue--\n                    // console.log(G.companyDeck[0].actualValue)\n                },\n                DecreaseCoin:(G,ctx,name,idCard)=>{\n                    // console.log({name})\n                    // console.log({idCard})\n                    --G.companyDeck[idCard-1].actualValue\n                    // topCard=G.companyDeck[idCard-1].order===idCard\n                    // console.log({topCard})\n                },\n                InitialDraw: (G, ctx) => {\n                    for (let i = 0; i < 4; i++) {\n                        topCard = G.companyDeck.shift();\n                        currentId[i] = topCard.id;\n\n                        // console.log(currentId);\n                        G.players[ctx.currentPlayer].handCompanyDeck.push(topCard);\n                    }\n\n                    for (let i = 0; i < 3; i++) {\n                        topCard = G.teamDeck.shift();\n                        G.players[ctx.currentPlayer].handTeamDeck.push(topCard);\n                    }\n                    ctx.events.endTurn();\n                },\n                DiscardCompany: (G,ctx,id) => {\n\n                    topCard = G.players[ctx.currentPlayer].handCompanyDeck.find((item) => item.id === id);\n                    G.companyDeck.push(topCard);\n                    findIndex = G.players[ctx.currentPlayer].handCompanyDeck.findIndex(i => i.id === id);\n                    if (findIndex > -1) {\n                        G.players[ctx.currentPlayer].handCompanyDeck.splice(findIndex, 1);\n                    }\n                    for (let i = 0; i < G.players[ctx.currentPlayer].handCompanyDeck.length; i++) {\n                        G.players[ctx.currentPlayer].bank.coin -= G.players[ctx.currentPlayer].handCompanyDeck[i].initialValue;\n                    }\n                },\n                DiscardTeam: (G, ctx, id) => {\n                    topCard = G.players[ctx.currentPlayer].handTeamDeck.find((item) => item.id === id);\n                    G.teamDeck.push(topCard);\n                    const findIndex = G.players[ctx.currentPlayer].handTeamDeck.findIndex(i => i.id === id);\n                    if (findIndex > -1) {\n                        G.players[ctx.currentPlayer].handTeamDeck.splice(findIndex, 1);\n                    }\n\n                },\n\n\n            },\n            endIf: G => (G.players[3].handTeamDeck.length === 2),//TODO change endif\n            start: true,\n            next: \"pickEvent\",\n        },\n        pickEvent: {\n            next: \"counterEvent\",\n            moves: {\n                DrawCarbonEventCard: (G, ctx) => {\n                    topCard = G.carbonDeck.shift();\n                    G.currentCarbon.push(topCard);\n\n                },\n                PickCarbonEvent: (G, ctx, id) => {\n                    if (id === 1) {\n\n                        G.players[ctx.playerID].bank.coin += G.players[ctx.currentPlayer].handCarbonDeck[0].event1.coinRaise;\n\n\n                    } else {\n\n                        G.players[ctx.playerID].bank.coin += G.players[ctx.currentPlayer].handCarbonDeck[0].event2.coinRaise;\n\n\n                    }\n\n                },\n            },\n            turn: {moveLimit: 2},\n        },\n        counterEvent: {\n            moves: {\n                counterEventGRO: (G, ctx, id) => {\n                    topCard = G.players[ctx.playerID].handTeamDeck.find((item) => item.type === \"GRO\");\n                    G.teamDeck.push(topCard);\n                    findIndex = G.players[ctx.currentPlayer].handCompanyDeck.findIndex(i => i.type === \"GRO\");\n                    if (findIndex > -1) {\n                        G.players[ctx.currentPlayer].handCompanyDeck.splice(findIndex, 1);\n                    }\n                },\n\n            },\n            turn: {moveLimit: 1},\n        },\n        companyMarket: {\n            moves: {\n                sellCompany: (G, ctx) => {\n\n                },\n                bidForCompany: (G, ctx) => {\n\n                },\n                takeOverCompany: (G, ctx) => {\n                    topCard = G.players[ctx.currentPlayer].handTeamDeck.find((item) => item.type === \"GEO\");\n                    G.teamDeck.push(topCard);\n\n                },\n            },\n            turn: {moveLimit: 2},\n        },\n\n\n        // turn: {moveLimit: 2},\n\n    }\n};\n\n\n","import React, {useState} from 'react';\r\nimport {Box, Typography} from '@material-ui/core'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport '../styles/App.css';\r\n// const image = \"../img/company/14/background-1.png\"\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n        mainSection: {\r\n            display: \"flex\",\r\n            fontSize: 18,\r\n            // backgroundColor:\"green\",\r\n\r\n            width: \"32px\",\r\n            height: \"32px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n        }\r\n    }));\r\n\r\n\r\n//TODO get the card with props of current player,hook only changables\r\n\r\n\r\nconst CoinCarbon = ({item,children}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Box className={`${classes.mainSection} + \" \" + mainFont greyFont `}>\r\n\r\n                {item.actualCarbon}\r\n\r\n\r\n            </Box>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CoinCarbon;","export let CELL_NAMES = {\n    a1: 'a1',\n    a2: 'a2',\n    a3: 'a3',\n    a4: 'a4',\n    a5: 'a5',\n    a6: 'a6',\n    a7: 'a7',\n    a8: 'a8',\n    a9: 'a9',\n    a0: 'a0',\n    b1: 'b1',\n    b2: 'b2',\n    b3: 'b3',\n    b4: 'b4',\n    b5: 'b5',\n    b6: 'b6',\n    b7: 'b7',\n    b8: 'b8',\n    b9: 'b9',\n    b0: 'b0',\n    c1: 'c1',\n    c2: 'c2',\n    c3: 'c3',\n    c4: 'c4',\n    c5: \"c5\",\n    c6: \"c6\",\n    c7: \"c7\",\n    c8: \"c8\",\n    c9: \"c9\",\n    c0: \"c0\",\n    d1: 'd1',\n    d2: 'd2',\n    d3: 'd3',\n    d4: 'd4',\n    d5: \"d5\",\n    d6: \"d6\",\n    d7: \"d7\",\n    d8: \"d8\",\n    d9: \"d9\",\n    d0: \"d0\",\n    k0: \"k0\",\n    k1: 'k1',\n    k2: 'k2',\n    k3: 'k3',\n    k4: 'k4',\n    k5: \"k5\",\n    k6: \"k6\",\n    k7: \"k7\",\n    k8: \"k8\",\n    k9: \"k9\",\n    k10: \"k10\",\n    k11: \"k11\",\n    k12: \"k12\",\n    k13: \"k13\",\n    k14: \"k14\",\n    k15: \"k15\",\n    k16: \"k16\",\n    k17: \"k17\",\n    k18: \"k18\",\n    h1:\"h1\",\n}\n","import React, {useState} from 'react';\r\nimport {Box, Typography} from '@material-ui/core'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport '../styles/App.css';\r\n// const image = \"../img/company/14/background-1.png\"\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n        mainSection: {\r\n            display: \"flex\",\r\n            fontSize: 18,\r\n            // backgroundColor:\"green\",\r\n\r\n            width: \"32px\",\r\n            height: \"32px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n        }\r\n    }));\r\n\r\n\r\n//TODO get the card with props of current player,hook only changables\r\n\r\n\r\nconst CoinMoney = ({item}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Box className={`${classes.mainSection} + \" \" + mainFont`}>\r\n\r\n                {item.actualValue}\r\n\r\n\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CoinMoney;\r\n","import React, {useRef, useState} from 'react';\nimport {Box, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport '../styles/App.css';\n// import {SourceBox} from \"./TestCellDnd/IsCard\";\nimport CoinCarbon from \"./CoinCarbon\";\nimport {DndProvider, useDrag, useDrop,DragSource,DropTarget,ConnectDragSource,ConnectDropTarget } from \"react-dnd\";\nimport CoinMoney from \"./CoinMoney\";\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => (\n    {\n        mainSection: {\n            // display: \"flex\",\n            width: \"120px\",\n            height: \"120px\",\n            borderRadius: \"10px\",\n            // backgroundColor:\"white\",\n            border: \"black\",\n        },\n\n        backImage: item => ({\n            backgroundImage: `url(${process.env.PUBLIC_URL + item.svgmain})`,\n            backgroundPosition: 'center',\n            backgroundSize: '100%',\n            backgroundRepeat: 'no-repeat',\n            height: '120px',\n            width: '120px',\n            display: 'block',\n            margin: 'auto',\n            // backgroundColor: \"white\",\n            // flexDirection:\"column\",\n\n            // marginTop: \"2%\",\n            // marginLeft: \"3%%\",\n        }),\n        valuesMain: {},\n        synergyMain: {},\n        actualValues: {\n            display: \"flex\",\n            justifyContent: 'space-between',\n            width: \"87%\",\n            height: \"26%\",\n            marginLeft: \"6%\",\n            marginTop: \"4%\",\n            paddingTop: \"6%\",\n        },\n        carbonActual: {\n            backgroundColor: \"black\",\n            border: \"3px solid grey\",\n            height: \"90%\",\n            width: \"27%\",\n            borderRadius: 50,\n            marginTop: \"2%\",\n            // marginLeft:\"6%\",\n        },\n        carbonDropAct: {\n            backgroundColor: \"black\",\n            border: \"3px solid grey\",\n            borderRadius: 50,\n            marginTop: \"2%\",\n            height: \"3%\",\n            width: \"1.5%\",\n\n        },\n        carbonActualText: {\n            color: \"grey\",\n            fontSize: \"16pt\",\n            marginLeft: \"28%\",\n            marginTop: \"-5%\",\n            fontWeight: 501,\n        },\n        valueActual: {\n            backgroundColor: \"white\",\n            border: \"3px solid #539bc5\",\n            height: \"90%\",\n            width: \"27%\",\n            borderRadius: 50,\n            marginTop: \"2%\",\n            // marginLeft: 104,\n        },\n        valueActualText: {\n            color: \"black\",\n            fontSize: \"16pt\",\n            marginLeft: \"28%\",\n            marginTop: \"-5%\",\n            fontWeight: 501,\n        },\n        initialValues: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"36%\",\n            height: \"17%\",\n            marginTop: \"12%\",\n            marginLeft: \"57%\",\n        },\n        initialCarbon: {\n            backgroundColor: \"black\",\n            border: \"3px solid grey\",\n            // height: \"100%\",\n            width: \"34%\",\n            borderRadius: 50,\n\n        },\n        initialValue: {\n            backgroundColor: \"white\",\n            border: \"3px solid #539bc5\",\n            // height: \"100%\",\n            width: \"34%\",\n            borderRadius: 50,\n\n        },\n        initialCarbonText: {\n            color: \"grey\",\n            fontSize: \"11pt\",\n            marginLeft: \"23%\",\n            marginTop: \"-19%\",\n            // fontWeight:501,\n        },\n        initialValueText: {\n            color: \"black\",\n            fontSize: \"11pt\",\n            marginLeft: \"23%\",\n            marginTop: \"-19%\",\n            // fontWeight:501,\n        },\n        synLeft: {\n            backgroundColor: \"white\",\n            border: \"2px solid #539bc5\",\n            height: \"10%\",\n            width: \"10%\",\n            marginTop: \"-18%\",\n            marginLeft: \"9%\",\n            borderRadius: 50,\n        },\n        synMid: {\n            backgroundColor: \"white\",\n            border: \"2px solid #539bc5\",\n            height: \"10%\",\n            borderRadius: 50,\n            width: \"10%\",\n            marginTop: \"-21%\",\n            marginLeft: \"34%\",\n\n\n        },\n        synLeftText: {\n            color: \"black\",\n            fontSize: \"7pt\",\n            marginLeft: \"1%\",\n            marginTop: \"-5%\",\n        },\n        synMidText: {\n            // fontWeight:501,\n            color: \"black\",\n            fontSize: \"7pt\",\n            marginLeft: \"1%\",\n            marginTop: \"-5%\",\n        },\n        companyName: {\n            marginTop: \"30.5%\",\n            marginLeft: \"8.5%\",\n            fontSize: \"10pt\",\n\n        },\n        directionValue1: {},\n        directionValue2: {\n            display: \"flex\",\n            fontSize: 18,\n            // backgroundColor:\"green\",\n\n            width: \"32px\",\n            height: \"32px\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n\n        },\n        directionValue3: {},\n        directionValue4: {},\n    }))\n\n\n//TODO get the card with props of current player,hook only changables\n\n\nconst CompanyCard = ({G, item, key, playerID,children}) => {\n    // const card = G.players[0].handCompanyDeck[0]\n    const classes = useStyles(item);\n\n\n\n    const cardDirectionClass = (item) => {\n\n        if (item.direction === 2) {\n\n            return (\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"105px\"} paddingTop={\"80px\"} paddingLeft={\"7px\"} >\n                    <CoinCarbon item={item} />\n                    <CoinMoney item={item}/>\n                    {children}\n                </Box>\n            );\n        }\n        if (item.direction === 1) {\n            return (\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"105px\"} paddingTop={\"80px\"} paddingLeft={\"7px\"} >\n\n\n                    <CoinMoney item={item}/>\n                    <CoinCarbon  item={item}/>\n                    {children}\n                </Box>\n            );\n        }\n        if (item.direction === 3) {\n\n            return (\n                    <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"106px\"} paddingTop={\"6px\"} paddingLeft={\"7px\"} >\n                        <CoinCarbon item={item} />\n                        <CoinMoney item={item}/>\n                        {children}\n\n\n                    </Box>\n            );\n        }\n        if (item.direction === 4) {\n\n            return (\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"106px\"} paddingTop={\"6px\"} paddingLeft={\"7px\"} >\n                    <CoinMoney item={item}/>\n                    <CoinCarbon item={item}/>\n                    {children}\n                </Box>\n            );\n        }\n    }\n    // const ref = useRef(null);\n    //\n    // const [, drop ] = useDrop(\n    //\n    //     {\n    //         accept: \"coinMoney\",\n    //     }\n    // );\n    //\n    // const [{isDragging},drag] = useDrag({\n    //\n    //     type: \"coinMoney\",\n    //\n    //     end: (draggedItem, monitor) => {\n    //\n    // },\n    //         collect: (monitor) => ({\n    //             isDragging: monitor.isDragging(),\n    //         }),\n    //     });\n    //\n    // const opacity = isDragging ? 0 : 1;\n    //\n    // drag(drop(ref));\n\n\n    // console.log(ID)\n    // console.log(currentId)\n    // const [{ isDragging }, drag] = useDrag({\n    //     type: \"companyCard\",\n    //     id: `${key}`,\n    //     collect: (monitor) => ({\n    //         isDragging: !!monitor.isDragging(),\n    //     }),\n    // })\n\n    // console.log(props.ctx);w\n    //console.log(playerId);\n\n\n    return (\n        <>\n            {/*<img src={process.env.PUBLIC_URL + '/img/company/cc12.png'} alt=\"\"/>*/}\n            <Box className={`${classes.mainSection}`}>\n\n\n                <Box className={`${classes.backImage}`}>\n\n\n                    {cardDirectionClass(item)}\n                    {children}\n\n                    {/*<Box zIndex={1} className={classes.actualValues}>*/}\n\n\n                    {/*    <Box className={classes.carbonActual}>*/}\n                    {/*        <Typography className={classes.carbonActualText}>{G.players[\"2\"].handCompanyDeck[0].carbonCoins}</Typography>*/}\n                    {/*    </Box>*/}\n\n\n                    {/*    <Box className={classes.valueActual}>*/}\n                    {/*        <Typography className={`${classes.valueActualText} `}>{G.players[1].handCompanyDeck[0].initialCarbon}</Typography>*/}\n                    {/*    </Box>*/}\n\n\n                    {/*</Box>*/}\n                    {/*<Box zIndex={2} className={classes.initialValues}>*/}\n                    {/*    <Box className={classes.initialValue}>*/}\n                    {/*        <Typography className={classes.initialValueText}>{G.players[1].handCompanyDeck[0].carbonCoins}</Typography>*/}\n                    {/*    </Box>*/}\n                    {/*    <Box className={classes.initialCarbon}>*/}\n                    {/*        <Typography className={classes.initialCarbonText}>{G.players[1].handCompanyDeck[0].initialCarbon}</Typography>*/}\n                    {/*    </Box>*/}\n                    {/*</Box>*/}\n\n\n                    {/*<Box className={classes.synLeft}>*/}\n                    {/*    <Typography className={classes.synLeftText}>+3</Typography>*/}\n                    {/*</Box>*/}\n                    {/*<Box className={classes.synMid}>*/}\n                    {/*    <Typography className={classes.synMidText}>+3</Typography>*/}\n                    {/*</Box>*/}\n                    {/*<Box className={classes.companyName}>{item.companyName}</Box>*/}\n\n                </Box>\n\n            </Box>\n\n\n        </>\n    );\n};\n\n\nexport default CompanyCard;","import {CELL_NAMES} from \"../components/CompanyHandLayout/companyCellNames\";\n\nexport let companyDeck = [\n\n\n    //TODO: try to make a single company deck with 5 separate arrays of cards for players and a bank.\n    //TODO: It will be easier to perform all the moves\n    {\n        id: \"1\",\n        order: 1,\n        idValue: 1,\n        direction: 2,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Dwellings, Inc.',\n        type: 'consumer',\n        initialValue: 2,\n        initialCarbon: 2,\n        actualValue: 2,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC1.svg\",\n        cell:CELL_NAMES.c2,\n    },\n\n    {\n        id: \"2\",\n        order: 2,\n        idValue: 2,\n        direction: 2,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Steaks, Inc.',\n        type: 'consumer',\n        initialValue: 1,\n        initialCarbon: 1,\n        actualValue: 1,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC2.svg\",\n        cell:CELL_NAMES.b1,\n    },\n\n    {\n        id: \"3\",\n        order: 3,\n        idValue: 3,\n        direction: 2,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Smartphone, Inc.',\n        type: 'consumer',\n        initialValue: 3,\n        initialCarbon: 1,\n        actualValue: 3,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC3.svg\",\n        cell:CELL_NAMES.d2,\n    },\n\n    {\n        id: \"4\",\n        order: 4,\n        idValue: 4,\n        direction: 2,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Airline, Inc.',\n        type: 'consumer',\n        initialValue: 4,\n        initialCarbon: 2,\n        actualValue: 4,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC4.svg\",\n        cell:CELL_NAMES.b3,\n    },\n\n    {\n        id: \"5\",\n        order: 5,\n        idValue: 5,\n        direction: 1,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Aircraft, Inc.',\n        type: 'production',\n        initialValue: 4,\n        initialCarbon: 2,\n        actualValue: 4,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC5.svg\",\n        cell:CELL_NAMES.b2,\n    },\n\n    {\n        id: \"6\",\n        order: 6,\n        idValue: 6,\n        direction: 1,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Packaging, Inc.',\n        type: 'production',\n        initialValue: 2,\n        initialCarbon: 1,\n        actualValue: 2,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC6.svg\",\n        cell:CELL_NAMES.b0,\n    },\n\n    {\n        id: \"7\",\n        order: 7,\n        idValue: 7,\n        direction: 1,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Chemicals, Inc.',\n        type: 'production',\n        initialValue: 4,\n        initialCarbon: 2,\n        actualValue: 4,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC7.svg\",\n        cell:CELL_NAMES.k4,\n    },\n\n    {\n        id: \"8\",\n        order: 8,\n        idValue: 8,\n        direction: 1,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Software, Inc.',\n        type: 'production',\n        initialValue: 4,\n        initialCarbon: 1,\n        actualValue: 4,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC8.svg\",\n        cell:CELL_NAMES.d1,\n    },\n    {\n        id: \"9\",\n        order: 9,\n        idValue: 9,\n        direction: 1,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Cement, Inc.',\n        type: 'production',\n        initialValue: 3,\n        initialCarbon: 2,\n        actualValue: 3,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC9.svg\",\n        cell:CELL_NAMES.c1,\n    },\n\n    {\n        id: \"10\",\n        order: 10,\n        idValue: 10,\n        direction: 4,\n        name: 'Shipping, Inc.',\n        type: 'distribution',\n        initialValue: 4,\n        initialCarbon: 3,\n        actualValue: 4,\n        actualCarbon: 3,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC10.svg\",\n        cell:CELL_NAMES.k0,\n    },\n\n    {\n        id: \"11\",\n        order: 11,\n        idValue: 11,\n        direction: 4,\n        name: 'Road Transport, Inc.',\n        type: 'distribution',\n        initialValue: 5,\n        initialCarbon: 3,\n        actualValue: 5,\n        actualCarbon: 3,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC11.svg\",\n        cell:CELL_NAMES.c6,\n    },\n\n    {\n        id: \"12\",\n        order: 12,\n        idValue: 12,\n        direction: 4,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Data & Wireless, Inc.',\n        type: 'distribution',\n        initialValue: 3,\n        initialCarbon: 2,\n        actualValue: 3,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC12.svg\",\n        cell:CELL_NAMES.k3,\n    },\n\n    {\n        id: \"13\",\n        order: 13,\n        idValue: 13,\n        direction: 4,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Grid & Pipeline, Inc.',\n        type: 'distribution',\n        initialValue: 3,\n        initialCarbon: 1,\n        actualValue: 3,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC13.svg\",\n        cell:CELL_NAMES.d6,\n    },\n\n    {\n        id: \"14\",\n        order: 14,\n        idValue: 14,\n        direction: 3,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Oil & Gas, Inc.',\n        type: 'resource',\n        initialValue: 6,\n        initialCarbon: 3,\n        actualValue: 6,\n        actualCarbon: 3,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC14.svg\",\n        cell:CELL_NAMES.c7,\n    },\n\n    {\n        id: \"15\",\n        order: 15,\n        idValue: 15,\n        direction: 3,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Sand & Metal, Inc.',\n        type: 'resource',\n        initialValue: 2,\n        initialCarbon: 1,\n        actualValue: 2,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC15.svg\",\n        cell:CELL_NAMES.k2,\n    },\n\n    {\n        id: \"16\",\n        order: 16,\n        idValue: 16,\n        direction: 3,\n        synmain: \"../img/company/16/background-16.png\",\n        name: 'Farm, Inc.',\n        type: 'resource',\n        initialValue: 3,\n        initialCarbon: 2,\n        actualValue: 3,\n        actualCarbon: 2,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC16.svg\",\n        cell:CELL_NAMES.k1,\n    },\n\n    {\n        id: \"17\",\n        order: 17,\n        idValue: 17,\n        direction: 3,\n        synmain: \"../img/company/14/background-1.png\",\n        // svgmain:\"../img/company/CompositeLayer.svg\",\n        name: 'Wind Power, Inc.',\n        type: 'resource',\n        initialValue: 3,\n        initialCarbon: 0,\n        actualValue: 3,\n        actualCarbon: 0,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC17.svg\",\n        cell:CELL_NAMES.d7,\n    },\n\n    {\n        id: \"18\",\n        order: 18,\n        idValue: 18,\n        direction: 3,\n        synmain: \"../img/company/14/background-1.png\",\n        name: 'Recycling, Inc.',\n        type: 'resource',\n        initialValue: 5,\n        initialCarbon: 1,\n        actualValue: 5,\n        actualCarbon: 1,\n        companyBank: 0,\n        svgmain: \"/img/newCards/CC18.svg\",\n        cell:CELL_NAMES.k7,\n    },\n\n];\n\nexport const getRandomCard = (deck) =>\n    deck[Math.floor(Math.random() * deck.length)];\n","export const carbonDeck = [\n\n    //TODO optimise and make it readable\n    {\n        backImage:\"../img/ce1test.png\",\n        frontImage:\"../img/carbonevent/EventCard1.png\",\n        event1: {\n            id: [1],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: 0,\n            carbonRaise: -1,\n            synergy: true,\n\n        },\n        event2: {\n            id: [1, 11, 16],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: -2,\n            carbonRaise: -2,\n            synergy: true,\n\n        },\n    },\n\n    {\n        event1: {\n            id: [1],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: 0,\n            carbonRaise: -1,\n            synergy: true,\n\n        },\n        event2: {\n            id: [1, 11, 16],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: -2,\n            carbonRaise: -2,\n            synergy: true,\n\n        },\n    },\n    {\n        event1: {\n            id: [1],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: 0,\n            carbonRaise: -1,\n            synergy: true,\n\n        },\n        event2: {\n            id: [1, 11, 16],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: -2,\n            carbonRaise: -2,\n            synergy: true,\n\n        },\n    },\n    {\n        event1: {\n            id: [1],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: 0,\n            carbonRaise: -1,\n            synergy: true,\n\n        },\n        event2: {\n            id: [1, 11, 16],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: -2,\n            carbonRaise: -2,\n            synergy: true,\n\n        },\n    }, {\n        event1: {\n            id: [1],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: 0,\n            carbonRaise: -1,\n            synergy: true,\n\n        },\n        event2: {\n            id: [1, 11, 16],\n            text:\"Cities upcycle existing buildings to new efficient energy standarts\",\n            coinRaise: -2,\n            carbonRaise: -2,\n            synergy: true,\n\n        },\n    },\n    // {\n    //     id: 1,\n    //     idText: \"DWELLINGS,INC.\",\n    //     text: \"Cities upcycle existing buildings to new efficient energy standarts\",\n    //     idText2: [\"AIRLINE,INC.\", \"AIRCRAFT,INC.\", \"OIL&GAS,INC.\"],\n    //     text2: \"Spreading flight shame reduces demand for air travel.\",\n    //\n    //     event1: [\n    //         {\n    //             event:1,\n    //             id: 1,\n    //             coinRaise: 0,\n    //             carbonRaise: -1,\n    //             synergy: true,\n    //         }\n    //     ],\n    //     event2: [\n    //         {\n    //             event:2,\n    //             id: 4,\n    //             coinRaise: -1,\n    //             carbonRaise: -1,\n    //             synergy: false,\n    //         },\n    //         {\n    //             id: 5,\n    //             coinRaise: -1,\n    //             carbonRaise: -1,\n    //             synergy: false,\n    //         },\n    //         {\n    //             id: 14,\n    //             coinRaise: -1,\n    //             carbonRaise: -1,\n    //             synergy: false,\n    //         },\n    //     ],\n    //\n    // },\n    // {\n    //     id: 2,\n    //     idText: \"STEAKS,INC.\",\n    //     text: \"Cattle feed with seaweed reduces methane emissions from livestock.\",\n    //     idText2: [\"DWELLINGS,INC.\", \"ROAD TRANSPORT,INC.\", \"FARM,INC.\"],\n    //     text2: \"Vertical farming in cities increases in popularity.\",\n    //\n    //     event1: [\n    //         {\n    //             id: 2,\n    //             coinRaise: 0,\n    //             carbonRaise: -1,\n    //             synergy: true,\n    //         }\n    //     ],\n    //     event2: [\n    //         {\n    //             id: 1,\n    //             coinRaise: 0,\n    //             carbonRaise: 0,\n    //             synergy: true,\n    //         },\n    //         {\n    //             id: 11,\n    //             coinRaise: -1,\n    //             carbonRaise: -1,\n    //             synergy: false,\n    //         },\n    //         {\n    //             id: 16,\n    //             coinRaise: 0,\n    //             carbonRaise: -1,\n    //             synergy: true,\n    //         },\n    //     ],\n    //\n    // },\n\n\n];\n\n// export const cDeck = [\n//     {\n//         Event1:{\n//             id:[1],\n//             coinRaise: 0,\n//             carbonRaise: -1,\n//             synergy: true,\n//\n//         },\n//         Event2:{\n//             id:[1,11,16],\n//             coinRaise: 0,\n//             carbonRaise: -2,\n//             synergy: true,\n//\n//         },\n//     },{}\n// ];","export const CELL_NAMES = {\r\n    f1: 'f1',\r\n    f2: 'f2',\r\n    f3: 'f3',\r\n    f4: 'f4',\r\n    f5: 'f5',\r\n    f6: 'f6',\r\n    f7: 'f7',\r\n    f0: 'f0',\r\n    e0: \"e0\",\r\n    g1: 'g1',\r\n    g2: 'g2',\r\n    g3: 'g3',\r\n    g4: 'g4',\r\n    g5: 'g5',\r\n    g6: 'g6',\r\n    g7: 'g7',\r\n    g0: 'g0',\r\n    h1: 'h1',\r\n    h2: 'h2',\r\n    h3: 'h3',\r\n    h4: 'h4',\r\n    h5: 'h5',\r\n    h6: 'h6',\r\n    h7: 'h7',\r\n    h0: 'h0',\r\n    i1: 'i1',\r\n    i2: 'i2',\r\n    i3: 'i3',\r\n    i4: 'i4',\r\n    i5: 'i5',\r\n    i6: 'i6',\r\n    i7: 'i7',\r\n    i0: 'i0',\r\n    j9: 'j9',\r\n    j10: 'j10',\r\n    j11: 'j11',\r\n    j12: 'j12',\r\n    j0: 'j0',\r\n    j1: 'j1',\r\n    j2: 'j2',\r\n    j3: 'j3',\r\n    j4: 'j4',\r\n    j5: 'j5',\r\n    j6: 'j6',\r\n    j7: 'j7',\r\n    j8: 'j8',\r\n\r\n\r\n}","//TODO playerView to hide team cards in multiplayer\nimport {CELL_NAMES} from \"../components/TeamHandLayout/TeamCellNames.js\";\nexport const teamDeck  = [\n    {\n        id:19,\n        name:\"1\",\n        type: \"GEO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: true,\n        counter: [\"GEO\",\"GSO\",\"GRO\"],\n        svgmain: \"/img/teamcards/TC3.svg\",\n        cell: CELL_NAMES.g0,\n    },\n    {\n        id:20,\n        name:\"2\",\n        type: \"GSO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: false,\n        counter: [\"GSO\"],\n        svgmain: \"/img/teamcards/TC1.svg\",\n        cell:CELL_NAMES.h0,\n    },\n    {\n        id:21,\n        name:\"3\",\n        type: \"GRO\",\n        minSignBid: 1,\n        reduceCarb: false,\n        changeEvent: true,\n        counter: [\"GRO\"],\n        svgmain: \"/img/teamcards/TC2.svg\",\n        cell: CELL_NAMES.i0,\n    },\n    {\n        id:22,\n        name:\"4\",\n        type: \"GEO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: true,\n        counter: [\"GEO\",\"GSO\",\"GRO\"],\n        svgmain: \"/img/teamcards/TC3.svg\",\n        cell:CELL_NAMES.j0,\n    },\n    {\n        id:23,\n        name:\"5\",\n        type: \"GSO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: false,\n        counter: [\"GSO\"],\n        svgmain: \"/img/teamcards/TC1.svg\",\n        cell:CELL_NAMES.j1,\n    },\n    {\n        id:24,\n        name:\"6\",\n        type: \"GRO\",\n        minSignBid: 1,\n        reduceCarb: false,\n        changeEvent: true,\n        counter: [\"GRO\"],\n        svgmain: \"/img/teamcards/TC2.svg\",\n        cell:CELL_NAMES.j2,\n    },\n    {\n        id:25,\n        name:\"7\",\n        type: \"GEO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: true,\n        counter: [\"GEO\",\"GSO\",\"GRO\"],\n        svgmain: \"/img/teamcards/TC3.svg\",\n        cell:CELL_NAMES.j3,\n    },\n    {\n        id:26,\n        name:\"8\",\n        type: \"GSO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: false,\n        counter: [\"GSO\"],\n        svgmain: \"/img/teamcards/TC1.svg\",\n        cell:CELL_NAMES.f1,\n    },\n    {\n        id:27,\n        name:\"9\",\n        type: \"GRO\",\n        minSignBid: 1,\n        reduceCarb: false,\n        changeEvent: true,\n        counter: [\"GRO\"],\n        svgmain: \"/img/teamcards/TC2.svg\",\n        cell:CELL_NAMES.j4,\n    },\n    {\n        id:28,\n        name:\"10\",\n        type: \"GEO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: true,\n        counter: [\"GEO\",\"GSO\",\"GRO\"],\n        svgmain: \"/img/teamcards/TC3.svg\",\n        cell:CELL_NAMES.j5,\n    },\n    {\n        id:29,\n        name:\"11\",\n        type: \"GSO\",\n        minSignBid: 1,\n        reduceCarb: true,\n        changeEvent: false,\n        counter: [\"GSO\"],\n        svgmain: \"/img/teamcards/TC1.svg\",\n        cell:CELL_NAMES.f4,\n\n    },\n    {\n        id:30,\n        name:\"12\",\n        type: \"GRO\",\n        minSignBid: 1,\n        reduceCarb: false,\n        changeEvent: true,\n        counter: [\"GRO\"],\n        svgmain: \"/img/teamcards/TC2.svg\",\n        cell:CELL_NAMES.f3,\n    },\n    ]\n","import React from 'react';\nimport {Box, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {currentId} from \"../Game\";\nimport CompanyCard from \"./CompanyCard\";\nimport {\n    Draggable,\n    Droppable,\n    DragComponent,\n    DragState\n} from \"react-dragtastic\"\nimport CoinCarbon from \"./CoinCarbon\";\nimport CoinMoney from \"./CoinMoney\";\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    mainSection: {\n        // display: \"flex\",\n        width: \"120px\",\n        height: \"120px\",\n        borderRadius: \"8px\",\n        // border: \"1px solid #a49f9f\",\n        // backgroundColor:\"white\",\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n\n        // position:\"absolute\",\n        alignContent: \"center\",\n        // margin:\"0 auto\",\n        zIndex: 0,\n\n    },\n\n    avatarNumber2:{\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/avatars/Avatar_B.svg\"})`,\n    },\n    avatarNumber1:{\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/avatars/Avatar_Aturn.svg\"})`,\n    },\n    avatarNumber3:{\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/avatars/Avatar_C.svg\"})`,\n    },\n    avatarNumber4:{\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/avatars/Avatar_D.svg\"})`,\n    },\n    nameSection: {\n        width: \"100%\",\n        // height:\"20%\",\n        // paddingTop:\"5%\",\n    },\n    nameText: {\n        color: \"white\",\n        textAlign: \"center\",\n        fontSize: \"8pt\",\n        fontWeight: \"1000\",\n\n    },\n    coinImg: {\n        height: \"30%\",\n        width: \"85%\",\n        marginLeft: \"5%\",\n    },\n    coinsImg: {\n        backgroundColor: \"white\",\n        borderRadius: 50,\n        border: \"3px solid #539bc5\",\n        height: \"61%\",\n        width: \"22%\",\n    },\n    carbonImg: {\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        borderRadius: 50,\n        height: \"61%\",\n        width: \"22%\",\n    },\n    teamImg: {\n        backgroundColor: \"lightskyblue\",\n        borderRadius: 50,\n        border: \"3px solid purple\",\n        height: \"61%\",\n        width: \"22%\",\n    },\n    coinValue: {\n        height: \"30%\",\n        width: \"85%\",\n        marginLeft: \"5%\",\n    },\n\n}))\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst NamePlate = ({G, playerId,avatarId}) => {\n    const classes = useStyles();\n\n\n    const cardDirectionClass = (avatarId) => {\n\n        if (avatarId === 2) {\n\n            return (\n              <Box position=\"relative\" className={[classes.mainSection, classes.avatarNumber2].join(' ')}>\n\n              </Box>\n            );\n        }\n        if (avatarId === 1) {\n            return (\n                <Box position=\"relative\" className={[classes.mainSection, classes.avatarNumber1].join(' ')}>\n\n                </Box>\n            );\n        }\n        if (avatarId === 3) {\n\n            return (\n                <Box position=\"relative\" className={[classes.mainSection, classes.avatarNumber3].join(' ')}>\n\n                </Box>\n            );\n        }\n        if (avatarId === 4) {\n\n            return (\n                <Box position=\"relative\" className={[classes.mainSection, classes.avatarNumber4].join(' ')}>\n\n                </Box>\n            );\n        }\n    }\n    return (\n        <Box>\n            {cardDirectionClass(avatarId)}\n        </Box>\n    );\n\n};\n\n\nexport default NamePlate;","import React, {useCallback, useState} from 'react';\nimport {Box, Grid} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {currentId} from \"../Game\";\nimport CompanyCard from \"./CompanyCard\";\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    mainSection: {\n        height:255,\n\n        // backgroundImage:`url(${image})`,\n        // backgroundRepeat: \"no-repeat\",\n\n\n    },\n    root:{\n        width:250,\n    },\n}))\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst CompanyStack = ({G,playerId,ctx,moves}) => {\n    const classes = useStyles();\n    console.log(G);\n    // const id = playerId.toString();\n    const player = G.players[playerId];\n\n\n\n    const cards = player.handCompanyDeck.map(card =>\n\n            <Grid item className={classes.root} sm={6} md={6} xs={6} lg={6} >\n                <CompanyCard card={card} key={card.id}  G={G}  ctx={ctx} moves={moves}/>\n            </Grid>\n\n            );\n\n\n\n\n\n    return (\n\n\n            <Box width={240} height={240}>\n                <Grid container spacing={1} justify={\"center\"} >\n                     {cards}\n                </Grid>\n            </Box>\n\n    );\n};\n\n\nexport default CompanyStack;","import React from \"react\";\nimport 'gridstack/dist/gridstack.min.css';\nimport { GridStack } from 'gridstack';\n// THEN to get HTML5 drag&drop\nimport 'gridstack/dist/h5/gridstack-dd-native';\n\nexport class DragItem extends React.Component {\n    state = {\n        count: 0,\n        info: \"\",\n        items: [\n            { x: 2, y: 1, h: 2 },\n            { x: 2, y: 4, w: 3 },\n            { x: 4, y: 2 },\n            { x: 3, y: 1, h: 2 },\n            { x: 0, y: 6, w: 2, h: 2 },\n        ],\n    };\n\n    componentDidMount() {\n        // Provides access to the GridStack instance across the React component.\n        this.grid = GridStack.init({\n            float: true,\n            cellHeight: \"70px\",\n            minRow: 1,\n        });\n\n        this.grid.on(\"dragstop\", (event, element) => {\n            const node = element.gridstackNode;\n            this.setState({\n                info: `you just dragged node #${node.id} to ${node.x},${node.y} – good job!`,\n            });\n\n            // Clear the info text after a two second timeout.\n            // Clears previous timeout first.\n            window.clearTimeout(this.timerId);\n            this.timerId = window.setTimeout(() => {\n                this.setState({\n                    info: \"\",\n                });\n            }, 2000);\n        });\n    }\n\n    addNewWidget = () => {\n        const node = this.state.items[this.state.count] || {\n            x: Math.round(12 * Math.random()),\n            y: Math.round(5 * Math.random()),\n            w: Math.round(1 + 3 * Math.random()),\n            h: Math.round(1 + 3 * Math.random()),\n        };\n        node.id = node.content = String(this.state.count);\n        this.setState((prevState) => ({\n            count: prevState.count + 1,\n        }));\n        this.grid.addWidget(node);\n    };\n\n    render() {\n        return (\n            <div>\n\n                <button type=\"button\" onClick={this.addNewWidget}>\n                    Add Widget\n                </button>\n                {this.state.info}\n                <section class=\"grid-stack\"></section>\n            </div>\n        );\n    }\n}\n","import React, {useCallback, useState} from 'react';\nimport {Box, Grid, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {currentId} from \"../Game\";\n// import CompanyCard from \"./CompanyCard\";\n\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n\n    root:{\n        width:200,\n    },\n    mainSection:   {\n        // display: \"flex\",\n        width: 100,\n        height: 100 ,\n        borderRadius: 20,\n        backgroundColor:\"white\",\n        border:\"black\",\n    },\n\n    backImage: card =>( {\n        backgroundImage:`url(${card.synmain})`,\n        backgroundPosition: 'center',\n        backgroundSize: '86%',\n        backgroundRepeat: 'no-repeat',\n        height: '100%',\n        width: '100%',\n        display: 'block',\n        margin: 'auto',\n        // flexDirection:\"column\",\n\n        // marginTop: \"2%\",\n        // marginLeft: \"3%%\",\n    }),\n    valuesMain: {},\n    synergyMain: {},\n    actualValues:{\n        display:\"flex\",\n        justifyContent:'space-between',\n        width:\"87%\",\n        height:\"26%\",\n        marginLeft:\"6%\",\n        marginTop:\"4%\",\n        paddingTop:\"6%\",\n    },\n    carbonActual: {\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        height: \"90%\",\n        width: \"27%\",\n        borderRadius: 50,\n        marginTop:\"2%\",\n        // marginLeft:\"6%\",\n    },\n    carbonDropAct:{\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        borderRadius: 50,\n        marginTop:\"2%\",\n        height: \"3%\",\n        width: \"1.5%\",\n\n    },\n    carbonActualText: {\n        color: \"grey\",\n        fontSize: \"16pt\",\n        marginLeft: \"28%\",\n        marginTop: \"-5%\",\n        fontWeight:501,\n    },\n    valueActual: {\n        backgroundColor: \"white\",\n        border: \"3px solid #539bc5\",\n        height: \"90%\",\n        width: \"27%\",\n        borderRadius: 50,\n        marginTop:\"2%\",\n        // marginLeft: 104,\n    },\n    valueActualText: {\n        color: \"black\",\n        fontSize: \"16pt\",\n        marginLeft: \"28%\",\n        marginTop: \"-5%\",\n        fontWeight:501,\n    },\n    initialValues:{\n        display:\"flex\",\n        justifyContent:\"space-between\",\n        width:\"36%\",\n        height:\"17%\",\n        marginTop:\"12%\",\n        marginLeft:\"57%\",\n    },\n    initialCarbon: {\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        // height: \"100%\",\n        width: \"34%\",\n        borderRadius: 50,\n\n    },\n    initialValue: {\n        backgroundColor: \"white\",\n        border: \"3px solid #539bc5\",\n        // height: \"100%\",\n        width: \"34%\",\n        borderRadius: 50,\n\n    },\n    initialCarbonText: {\n        color: \"grey\",\n        fontSize: \"11pt\",\n        marginLeft: \"23%\",\n        marginTop: \"-19%\",\n        // fontWeight:501,\n    },\n    initialValueText: {\n        color: \"black\",\n        fontSize: \"11pt\",\n        marginLeft: \"23%\",\n        marginTop: \"-19%\",\n        // fontWeight:501,\n    },\n    synLeft:{\n        backgroundColor: \"white\",\n        border: \"2px solid #539bc5\",\n        height: \"10%\",\n        width: \"10%\",\n        marginTop: \"-18%\",\n        marginLeft: \"9%\",\n        borderRadius: 50,\n    },\n    synMid:{\n        backgroundColor: \"white\",\n        border: \"2px solid #539bc5\",\n        height: \"10%\",\n        borderRadius:50,\n        width: \"10%\",\n        marginTop: \"-21%\",\n        marginLeft: \"34%\",\n\n\n    },\n    synLeftText:{\n        color: \"black\",\n        fontSize: \"7pt\",\n        marginLeft: \"1%\",\n        marginTop: \"-5%\",\n    },\n    synMidText:{\n        // fontWeight:501,\n        color: \"black\",\n        fontSize: \"7pt\",\n        marginLeft: \"1%\",\n        marginTop: \"-5%\",\n    },\n    companyName:{\n        marginTop: \"30.5%\",\n        marginLeft:\"8.5%\",\n        fontSize:\"10pt\",\n\n    },\n}))\n\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst CompanyHand = ({G,playerId,ctx,moves}) => {\n    const classes = useStyles();\n\n    console.log(G);\n    // const id = playerId.toString();\n    const player = G.players[playerId];\n\n    const [handCards, setHandCards] = useState(player.handCompanyDeck);\n\n\n    const CompanyCard = ({card,key,G,ctx,moves}) => {\n\n        const classes = useStyles(card);\n        // console.log(currentId)\n\n\n        // console.log(props.ctx);\n        //console.log(playerId);\n\n\n\n\n\n\n        return (\n\n            <Box\n                className={`${classes.mainSection}`}\n            >\n\n\n                <Box className={`${classes.backImage}`}>\n                    <Box zIndex={1} className={classes.actualValues}>\n\n\n                        <Box className={classes.carbonActual}>\n                            <Typography className={classes.carbonActualText}>{card.actualCarbon}</Typography>\n                        </Box>\n\n\n                        <Box className={classes.valueActual}>\n                            <Typography className={`${classes.valueActualText} `}>{card.actualValue}</Typography>\n                        </Box>\n\n\n                    </Box>\n                    <Box zIndex={2} className={classes.initialValues}>\n                        <Box className={classes.initialValue}>\n                            <Typography className={classes.initialValueText}>{card.initialValue}</Typography>\n                        </Box>\n                        <Box className={classes.initialCarbon}>\n                            <Typography className={classes.initialCarbonText}>{card.initialCarbon}</Typography>\n                        </Box>\n                    </Box>\n\n\n                    <Box className={classes.synLeft}>\n                        <Typography className={classes.synLeftText}>+3</Typography>\n                    </Box>\n                    <Box className={classes.synMid}>\n                        <Typography className={classes.synMidText}>+3</Typography>\n                    </Box>\n                    <Box className={classes.companyName}>{card.companyName}</Box>\n\n                </Box>\n\n            </Box>\n\n\n        );\n    };\n\n    const cards = handCards.map(card =>\n\n        <Grid item className={classes.root} sm={6} md={6} xs={6} lg={6} >\n            <CompanyCard card={card} key={card.id}  G={G}  ctx={ctx} moves={moves}/>\n        </Grid>\n\n    );\n\n    return (\n\n\n        <Box width={200} height={200}>\n            <Grid container spacing={1} justify={\"center\"} >\n                {cards}\n            </Grid>\n        </Box>\n\n    );\n};\n\n\nexport default CompanyHand;","import React, {useState} from 'react';\nimport {Box, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {carbonDeck} from \"../constants/carbonDeck\";\nimport {currentId} from \"../Game\";\nimport {\n    Draggable,\n    Droppable,\n    DragComponent,\n    DragState\n} from \"react-dragtastic\";\nimport CarbonValue from \"./CarbonValue\";\n\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    backCarbon: pic => ({\n        width: 240,\n        height: 240,\n        backgroundColor: \"white\",\n        borderRadius: 11,\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/newCards/CE_Back.svg\"})`,\n        // ${process.env.PUBLIC_URL + '/img/company/cc12.png'}/\n        // position:\"absolute\",\n        alignContent: \"center\",\n        // margin:\"0 auto\",\n        zIndex: 0,\n\n        // border: '1px solid #a49f9f',\n    }),\n    frontCarbon: {\n        width: 240,\n        height: 240,\n        backgroundColor: \"white\",\n        borderRadius: 7,\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/newCards/CE1.svg\"})`,\n        // position:\"absolute\",\n        alignContent: \"center\",\n        margin: \"0 auto\",\n        zIndex: 0,\n        // border: '1px solid #a49f9f',\n        // border: '0.5px solid #a49f9f',\n    },\n}))\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst CarbonEventCard = () => {\n    const [event, setEvent] = useState(1)\n\n    const classes = useStyles(carbonDeck);\n\n    return (\n        <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"480px\"} height={\"240px\"}\n             marginLeft={\"-60px\"}>\n            <Box display={\"inline-block\"} onClick={() => {\n                setEvent(event + 1)\n            }}\n                 className={classes.backCarbon}>\n\n            </Box>\n            <Box display={\"inline-block\"} className={classes.frontCarbon}></Box>\n        </Box>\n\n\n    );\n};\n\n\nexport default CarbonEventCard;"," import React from 'react';\nimport {Box, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n    Draggable,\n    Droppable,\n    DragComponent,\n    DragState\n} from \"react-dragtastic\";\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    carbonActual: {\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        height: \"90%\",\n        width: \"27%\",\n        borderRadius: 50,\n        marginTop:\"2%\",\n        // marginLeft:\"6%\",\n    },\n    carbonActualText: {\n        color: \"grey\",\n        fontSize: \"16pt\",\n        marginLeft: \"28%\",\n        marginTop: \"-5%\",\n        fontWeight:501,\n    },\n    carbonDropAct:{\n        backgroundColor: \"black\",\n        border: \"3px solid grey\",\n        borderRadius: 50,\n        marginTop:\"2%\",\n        height: \"3%\",\n        width: \"1.5%\",\n\n    },\n\n}))\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst CarbonValue = ({G,ctx,card,playerId,}) => {\n    const classes = useStyles();\n    return (\n<Box>\n        <Draggable id={card.id} type={\"actual\"} >\n            {dragState => (\n                <Box {...dragState.events} className={classes.carbonActual}>\n                    <Typography className={classes.carbonActualText}>{card.actualCarbon}</Typography>\n                </Box>\n            )}\n        </Draggable>\n\n    <DragComponent for={card.id} >\n        {dragState => (\n\n            <Box  className={classes.carbonDropAct} style={{\n                position:\"fixed\",\n                pointerEvents: 'none',\n                left: dragState.x -10  ,\n                top: dragState.y -30\n            }} onDrag={()=> {\n                console.log(...dragState.isOverAccepted);\n            }}\n            >\n                <Typography className={classes.carbonActualText}>1</Typography>\n            </Box>\n        )}\n    </DragComponent>\n</Box>\n    );\n};\n\n\nexport default CarbonValue;","import React, {useCallback, useState} from 'react';\nimport {Box, Grid, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {GridContextProvider, GridDropZone, GridItem} from \"react-grid-dnd\";\n\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    mainSection: item => ({\n        width: \"60px\",\n        // border: \"0.5px solid #a49f9f\",\n        height: \"120px\",\n        // backgroundColor:\"limegreen\",\n        borderRadius: \"8px\",\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage: `url(${process.env.PUBLIC_URL + item.svgmain})`,\n        // position:\"absolute\",\n        alignContent: \"center\",\n        // margin:\"0 auto\",s\n        // zIndex:0,\n        // marginRight:\"1px\",\n        // marginTop:\"\",\n    }),\n\n}))\n\n\n//TODO get the card with props of current player,hook only changables\n\nconst TeamCard = ({G, item}) => {\n    const classes = useStyles(item);\n\n\n    return (\n\n        <Box className={classes.mainSection}>\n\n        </Box>\n\n\n    );\n}\n\n\nexport default TeamCard;","// import CompanyCard from \"../CompanyCard\";\n// import {Square} from \"./Square\";\n// export const IsCard = ({ G,item,isCard,key }) => isCard ? null : <CompanyCard G={G} item={item} key={key}/>\n\n\nimport { useState, useCallback, useMemo, memo } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => (\n    {\n        mainSection: {\n            display: \"flex\",\n            fontSize: 18,\n            // backgroundColor:\"green\",\n\n            width: \"32px\",\n            height: \"32px\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n        }\n    }));\nexport const SourceBox = memo(function SourceBox({item,children}) {\n\n    const classes = useStyles();\n\n    const [, drag] = useDrag(\n        () => ({\n            type: \"coinMoney\",\n\n            collect: (monitor) => ({\n                isDragging: monitor.isDragging()\n            })\n        })\n    );\n    return (\n        <div ref={drag} className={`${classes.mainSection} + \" \" + mainFont greyFont `} >\n            {3}\n            {children}\n        </div>\n    );\n});\n","import React, {useState, useCallback, useMemo, memo, useRef} from \"react\";\r\nimport {useDrag, useDrop} from \"react-dnd\";\r\nimport {Box, Typography} from '@material-ui/core'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport '../../styles/App.css';\r\n// const image = \"../img/company/14/background-1.png\"\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n        mainSection: {\r\n            display: \"flex\",\r\n            fontSize: 18,\r\n            // backgroundColor:\"green\",\r\n\r\n            width: \"32px\",\r\n            height: \"32px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n        }\r\n    }));\r\n\r\n\r\n const Coin=({ color,name,idCard,setValue,setItems,value, children,item,moves,G,ctx })=> {\r\n\r\n    // const [{ isDragging }, drag] = useDrag(\r\n    //   {\r\n    //     item: {type: \"color\"},\r\n    //\r\n    //     collect: (monitor) => ({\r\n    //       isDragging: monitor.isDragging()\r\n    //     })\r\n    //   }\r\n    //\r\n    // );\r\n    const ref = useRef(null);\r\n    const classes = useStyles();\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'bid',\r\n\r\n    });\r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {idCard,name,type: 'bid'},\r\n        end: ( ) => {\r\n\r\n            // moves.InitialDraw();\r\n            // if (value!=G.companyDeck[idCard-1].actualValue){\r\n            //     setValue(G.companyDeck[idCard-1].actualValue)\r\n            // }\r\n                moves.DecreaseCoin(name,idCard);\r\n            // setItems(G.companyDeck);\r\n\r\n            //\r\n\r\n                setValue(G.companyDeck[idCard-1].actualValue)\r\n            setValue(value-1)\r\n                console.log(G.companyDeck[idCard-1].actualValue);\r\n\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n    const opacity = isDragging ? 0 : 1;\r\n\r\n\r\n\r\n    const containerStyle = useMemo(\r\n        () => ({\r\n            opacity: isDragging ? 0.4 : 1,\r\n\r\n        }),\r\n        [isDragging]\r\n    );\r\n    drag(drop(ref))\r\n    return (\r\n        <div ref={ref} >\r\n            <Box className={`${classes.mainSection} + \" \" + mainFont`}>\r\n\r\n                {value}\r\n\r\n\r\n            </Box>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n export default Coin;","import React, {useState, useEffect, useMemo, memo, useRef} from \"react\";\r\nimport {useDrag, useDrop} from \"react-dnd\";\r\nimport CoinCarbon from \"../CoinCarbon\";\r\nimport Coin from \"./Coin\";\r\nimport {Box, Typography} from '@material-ui/core'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport '../../styles/App.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n        mainSection: {\r\n            // display: \"flex\",\r\n            width: \"120px\",\r\n            height: \"120px\",\r\n            borderRadius: \"10px\",\r\n            // backgroundColor:\"white\",\r\n            border: \"black\",\r\n        },\r\n\r\n        backImage: item => ({\r\n            backgroundImage: `url(${process.env.PUBLIC_URL + item.svgmain})`,\r\n            backgroundPosition: 'center',\r\n            backgroundSize: '100%',\r\n            backgroundRepeat: 'no-repeat',\r\n            height: '120px',\r\n            width: '120px',\r\n            display: 'block',\r\n            margin: 'auto',\r\n            // backgroundColor: \"white\",\r\n            // flexDirection:\"column\",\r\n\r\n            // marginTop: \"2%\",\r\n            // marginLeft: \"3%%\",\r\n        }),\r\n        valuesMain: {},\r\n        synergyMain: {},\r\n        actualValues: {\r\n            display: \"flex\",\r\n            justifyContent: 'space-between',\r\n            width: \"87%\",\r\n            height: \"26%\",\r\n            marginLeft: \"6%\",\r\n            marginTop: \"4%\",\r\n            paddingTop: \"6%\",\r\n        },\r\n        carbonActual: {\r\n            backgroundColor: \"black\",\r\n            border: \"3px solid grey\",\r\n            height: \"90%\",\r\n            width: \"27%\",\r\n            borderRadius: 50,\r\n            marginTop: \"2%\",\r\n            // marginLeft:\"6%\",\r\n        },\r\n        carbonDropAct: {\r\n            backgroundColor: \"black\",\r\n            border: \"3px solid grey\",\r\n            borderRadius: 50,\r\n            marginTop: \"2%\",\r\n            height: \"3%\",\r\n            width: \"1.5%\",\r\n\r\n        },\r\n        carbonActualText: {\r\n            color: \"grey\",\r\n            fontSize: \"16pt\",\r\n            marginLeft: \"28%\",\r\n            marginTop: \"-5%\",\r\n            fontWeight: 501,\r\n        },\r\n        valueActual: {\r\n            backgroundColor: \"white\",\r\n            border: \"3px solid #539bc5\",\r\n            height: \"90%\",\r\n            width: \"27%\",\r\n            borderRadius: 50,\r\n            marginTop: \"2%\",\r\n            // marginLeft: 104,\r\n        },\r\n        valueActualText: {\r\n            color: \"black\",\r\n            fontSize: \"16pt\",\r\n            marginLeft: \"28%\",\r\n            marginTop: \"-5%\",\r\n            fontWeight: 501,\r\n        },\r\n        initialValues: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"36%\",\r\n            height: \"17%\",\r\n            marginTop: \"12%\",\r\n            marginLeft: \"57%\",\r\n        },\r\n        initialCarbon: {\r\n            backgroundColor: \"black\",\r\n            border: \"3px solid grey\",\r\n            // height: \"100%\",\r\n            width: \"34%\",\r\n            borderRadius: 50,\r\n\r\n        },\r\n        initialValue: {\r\n            backgroundColor: \"white\",\r\n            border: \"3px solid #539bc5\",\r\n            // height: \"100%\",\r\n            width: \"34%\",\r\n            borderRadius: 50,\r\n\r\n        },\r\n        initialCarbonText: {\r\n            color: \"grey\",\r\n            fontSize: \"11pt\",\r\n            marginLeft: \"23%\",\r\n            marginTop: \"-19%\",\r\n            // fontWeight:501,\r\n        },\r\n        initialValueText: {\r\n            color: \"black\",\r\n            fontSize: \"11pt\",\r\n            marginLeft: \"23%\",\r\n            marginTop: \"-19%\",\r\n            // fontWeight:501,\r\n        },\r\n        synLeft: {\r\n            backgroundColor: \"white\",\r\n            border: \"2px solid #539bc5\",\r\n            height: \"10%\",\r\n            width: \"10%\",\r\n            marginTop: \"-18%\",\r\n            marginLeft: \"9%\",\r\n            borderRadius: 50,\r\n        },\r\n        synMid: {\r\n            backgroundColor: \"white\",\r\n            border: \"2px solid #539bc5\",\r\n            height: \"10%\",\r\n            borderRadius: 50,\r\n            width: \"10%\",\r\n            marginTop: \"-21%\",\r\n            marginLeft: \"34%\",\r\n\r\n\r\n        },\r\n        synLeftText: {\r\n            color: \"black\",\r\n            fontSize: \"7pt\",\r\n            marginLeft: \"1%\",\r\n            marginTop: \"-5%\",\r\n        },\r\n        synMidText: {\r\n            // fontWeight:501,\r\n            color: \"black\",\r\n            fontSize: \"7pt\",\r\n            marginLeft: \"1%\",\r\n            marginTop: \"-5%\",\r\n        },\r\n        companyName: {\r\n            marginTop: \"30.5%\",\r\n            marginLeft: \"8.5%\",\r\n            fontSize: \"10pt\",\r\n\r\n        },\r\n        directionValue1: {},\r\n        directionValue2: {\r\n            display: \"flex\",\r\n            fontSize: 18,\r\n            // backgroundColor:\"green\",\r\n\r\n            width: \"32px\",\r\n            height: \"32px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n\r\n        },\r\n        directionValue3: {},\r\n        directionValue4: {},\r\n    }))\r\n\r\n\r\nexport const CompanyCard3 = ({G, item, name , idCard, playerID, children, moves, ctx,setItems}) => {\r\n\r\n    const classes = useStyles(item);\r\n    const [value, setValue] = useState(G.companyDeck[idCard-1].actualValue);\r\n\r\n// console.log({idCard});\r\n\r\n\r\n\r\n\r\n    // let topCard = G.find((item)=> item.id === 1)\r\n    // console.log(topCard.actualValue)\r\n\r\n\r\n    // const [{ isDragging }, drag] = useDrag(\r\n    //   {\r\n    //     item: {type: \"color\"},\r\n    //\r\n    //     collect: (monitor) => ({\r\n    //       isDragging: monitor.isDragging()\r\n    //     })\r\n    //   }\r\n    //\r\n    // );\r\n    const ref = useRef(null);\r\n\r\n    const [, drop] = useDrop(\r\n    // ()=>(\r\n        {\r\n        accept: 'bid',\r\n            drop(_item){\r\n\r\n                // if (value!=G.companyDeck[idCard-1].actualValue){\r\n                //     setValue(G.companyDeck[idCard-1].actualValue)\r\n                // }\r\n                moves.IncreaseCoin(name,idCard);\r\n\r\n                    // setValue(G.companyDeck[idCard-1].actualValue)\r\n                setValue(value+1)\r\n                    console.log(G.companyDeck[idCard-1].actualValue);\r\n\r\n                // setItems(G.companyDeck);\r\n\r\n\r\n            },\r\n\r\n\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            isOverCurrent: monitor.isOver(),\r\n\r\n        }),\r\n    }\r\n    // ),[setItems],\r\n    //\r\n    );\r\n\r\n\r\n    // const [{isDragging}, drag] = useDrag({\r\n    //     item: { type: 'companyCard'},\r\n    //\r\n    //     collect: (monitor) => ({\r\n    //         isDragging: monitor.isDragging(),\r\n    //     }),\r\n    // });\r\n\r\n    // const opacity = isDragging ? 0 : 1;\r\n\r\n\r\n    //   const containerStyle = useMemo(\r\n    //   () => ({\r\n    //     opacity: isDragging ? 0.4 : 1,\r\n    //\r\n    //   }),\r\n    //   [isDragging]\r\n    // );\r\n\r\n\r\n    const cardDirectionClass = (item, moves) => {\r\n\r\n        if (item.direction === 2) {\r\n\r\n            return (\r\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"105px\"} paddingTop={\"80px\"}\r\n                     paddingLeft={\"7px\"}>\r\n                    <CoinCarbon item={item}/>\r\n                    <Coin moves={moves} setValue={setValue} setItems={setItems} G={G} ctx={ctx} value={value} name={name} item={item} idCard={idCard}/>\r\n                    {children}\r\n                </Box>\r\n            );\r\n        }\r\n        if (item.direction === 1) {\r\n            return (\r\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"105px\"} paddingTop={\"80px\"}\r\n                     paddingLeft={\"7px\"}>\r\n                    <Coin moves={moves} setValue={setValue} setItems={setItems} G={G} ctx={ctx} value={value} name={name} item={item} idCard={idCard}/>\r\n                    <CoinCarbon item={item}/>\r\n                    {children}\r\n                </Box>\r\n            );\r\n        }\r\n        if (item.direction === 3) {\r\n\r\n            return (\r\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"106px\"} paddingTop={\"6px\"}\r\n                     paddingLeft={\"7px\"}>\r\n                    <CoinCarbon item={item}/>\r\n                    <Coin moves={moves} setValue={setValue} setItems={setItems} G={G} ctx={ctx} value={value} name={name} item={item} idCard={idCard}/>\r\n                    {children}\r\n\r\n\r\n                </Box>\r\n            );\r\n        }\r\n        if (item.direction === 4) {\r\n\r\n            return (\r\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"106px\"} paddingTop={\"6px\"}\r\n                     paddingLeft={\"7px\"}>\r\n                    <Coin moves={moves} setValue={setValue} G={G} setItems={setItems} ctx={ctx} value={value} name={name} item={item} idCard={idCard}/>\r\n                    <CoinCarbon item={item}/>\r\n                    {children}\r\n                </Box>\r\n            );\r\n        }\r\n    }\r\n    drop(ref);\r\n    return (\r\n        <div ref={ref}>\r\n            <Box className={`${classes.mainSection}`}>\r\n                <Box className={`${classes.backImage}`}>\r\n                    {cardDirectionClass(item, moves)}\r\n                    {children}\r\n                </Box>\r\n            </Box>\r\n            {children}\r\n        </div>\r\n\r\n    );\r\n};\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {DndProvider, useDrag, useDrop} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport {TouchBackend} from \"react-dnd-touch-backend\";\r\nimport '../../styles/App.css';\r\nimport {CELL_NAMES} from \"./TeamCellNames\";\r\nimport {Box, Typography} from '@material-ui/core'\r\nimport CompanyCard from \"../CompanyCard\";\r\nimport TeamCard from \"../TeamCard\";\r\nimport {teamDeck} from \"../../constants/teamDeck\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {carbonDeck} from \"../../constants/carbonDeck\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    bankFlex: {\r\n        width: 120,\r\n        height: 120,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 10,\r\n        backgroundPosition: 'center',\r\n        backgroundSize: '100%',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/avatars/Avatar_HR.svg\"})`,\r\n        // ${process.env.PUBLIC_URL + '/img/company/cc12.png'}/\r\n        // position:\"absolute\",\r\n        alignContent: \"center\",\r\n        // margin:\"0 auto\",\r\n        zIndex: 0,\r\n\r\n        // border: '1px solid #a49f9f',\r\n    },\r\n    companyBankFlex:{\r\n        display: \"flex\",\r\n        width: \"480px\",\r\n        justifyContent: \"space-around\",\r\n        marginLeft:\"-60px\",\r\n        marginTop:\"180px\",\r\n        marginBottom:\"60px\",\r\n\r\n    },\r\n}))\r\n\r\n\r\n\r\n\r\n\r\nconst MovableItem = ({name, index, currentCellName, moveCardHandler, setItems, G, playerID, item}) => {\r\n    const changeItemCell = (currentItem, cellName) => {\r\n        setItems((prevState) => {\r\n            return prevState.map(e => {\r\n                return {\r\n                    ...e,\r\n                    cell: e.name === currentItem.name ? cellName : e.cell\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    // console.log(ID);\r\n\r\n    const ref = useRef(null);\r\n\r\n    const [, drop] = useDrop({\r\n        accept: 'companyCard',\r\n        // hover(item: any, monitor) {\r\n        //     if (!ref.current) {\r\n        //         return;\r\n        //     }\r\n        //     const dragIndex = item.index;\r\n        //     const hoverIndex = index;\r\n        //     // Don't replace items with themselves\r\n        //     if (dragIndex === hoverIndex) {\r\n        //         return;\r\n        //     }\r\n        //     // Determine rectangle on screen\r\n        //     const hoverBoundingRect = ref.current?.getBoundingClientRect();\r\n        //     // Get vertical middle\r\n        //     const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n        //     // Determine mouse position\r\n        //     const clientOffset = monitor.getClientOffset();\r\n        //     // Get pixels to the top\r\n        //     const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n        //     // Only perform the move when the mouse has crossed half of the items height\r\n        //     // When dragging downwards, only move when the cursor is below 50%\r\n        //     // When dragging upwards, only move when the cursor is above 50%\r\n        //     // Dragging downwards\r\n        //     if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        //         return;\r\n        //     }\r\n        //     // Dragging upwards\r\n        //     if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        //         return;\r\n        //     }\r\n        //     // Time to actually perform the action\r\n        //     moveCardHandler(dragIndex, hoverIndex);\r\n        //     // Note: we're mutating the monitor item here!\r\n        //     // Generally it's better to avoid mutations,\r\n        //     // but it's good here for the sake of performance\r\n        //     // to avoid expensive public searches.\r\n        //     item.index = hoverIndex;\r\n        // },\r\n    });\r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {index, name, currentCellName, type: 'companyCard'},\r\n        end: (item, monitor) => {\r\n            const dropResult = monitor.getDropResult();\r\n\r\n            if (dropResult) {\r\n                const {name} = dropResult;\r\n                let playerId = [\"f\", \"g\", \"h\", \"i\",\"e\",\"j\"];\r\n                let cellId;\r\n\r\n                for (let j = 0; j < 6; j++) {\r\n                    for (let l = 0; l < 12; l++) {\r\n                        cellId = playerId[j].concat(l);\r\n\r\n                        switch (name) {\r\n                            case cellId :\r\n                                changeItemCell(item, cellId);\r\n                                return;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    const opacity = isDragging ? 0 : 1;\r\n\r\n    drag(drop(ref));\r\n\r\n    return (\r\n        <div ref={ref} style={{opacity}}>\r\n            <TeamCard G={G} item={item} playerID={playerID}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Cell = ({children, className, title, G, ctx, ID}) => {\r\n    const [{isOver, canDrop}, drop] = useDrop({\r\n        accept: 'companyCard',\r\n        drop: () => ({name: title}),\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n\r\n    });\r\n\r\n\r\n    return (\r\n        <div ref={drop} className={className}>\r\n            {/* <p>{title}</p> */}\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const TeamHand = ({G, ctx, ID}) => {\r\n\r\n    const [items, setItems] = useState(teamDeck);\r\n    const classes = useStyles(carbonDeck);\r\n    const isMobile = window.innerWidth < 600;\r\n\r\n    // const card = G.players[0].handCompanyDeck[2];\r\n\r\n    const moveCardHandler = (dragIndex, hoverIndex) => {\r\n\r\n        const dragItem = items[dragIndex];\r\n\r\n        if (dragItem) {\r\n            setItems((prevState => {\r\n                const copiedStateArray = [...prevState];\r\n\r\n                // remove item by \"hoverIndex\" and put \"dragItem\" instead\r\n                const prevItem = copiedStateArray.splice(hoverIndex, 1, dragItem);\r\n\r\n                // remove item by \"dragIndex\" and put \"prevItem\" instead\r\n                copiedStateArray.splice(dragIndex, 1, prevItem[0]);\r\n\r\n                return copiedStateArray;\r\n            }));\r\n        }\r\n    };\r\n\r\n    const returnItemsForCell = (cellName) => {\r\n        return items.filter((item) => item.cell === cellName).map((item, index, G) => (\r\n            <MovableItem key={item.id}\r\n                         name={item.name}\r\n                         currentCellName={item.cell}\r\n                         setItems={setItems}\r\n                         index={index}\r\n                         moveCardHandler={moveCardHandler}\r\n                         G={G}\r\n                         item={item}\r\n                         playerID={ID}\r\n            />\r\n        ))\r\n    };\r\n\r\n    const {\r\n        f1,\r\n        f2,\r\n        f3,\r\n        f4,\r\n        f5,\r\n        f6,\r\n        f7,\r\n        f0,\r\n        e0,\r\n        g1,\r\n        g2,\r\n        g3,\r\n        g4,\r\n        g5,\r\n        g6,\r\n        g7,\r\n        g0,\r\n        h1,\r\n        h2,\r\n        h3,\r\n        h4,\r\n        h5,\r\n        h6,\r\n        h7,\r\n        h0,\r\n        i1,\r\n        i2,\r\n        i3,\r\n        i4,\r\n        i5,\r\n        i6,\r\n        i7,\r\n        i0,\r\n        j1,\r\n        j2,\r\n        j3,\r\n        j4,\r\n        j5,\r\n        j6,\r\n        j7,\r\n        j0,\r\n        j8,\r\n        j9,\r\n        j10,\r\n        j11,\r\n    } = CELL_NAMES;\r\n    const mapBank = () =>{\r\n\r\n        let cellId;\r\n        let bankId = [\"j\"];\r\n        let cellsList = [];\r\n        for (let i=0; i <12 ; i++){\r\n            cellId = bankId[0].concat(i);\r\n            cellsList.push(\r\n                <Cell title={cellId} className={\"cellColumn\"}>\r\n                    {returnItemsForCell(cellId)}\r\n                </Cell>\r\n            )\r\n\r\n        }\r\n        return cellsList;\r\n    }\r\n\r\n// TODO: map handcompany into cells\r\n    return (\r\n        <>\r\n            <div className={\"mainTeam\"}>\r\n            <div className={\"flowTeam\"}>\r\n            <div className={\"cellFlow\"}>\r\n                <Cell title={f0} className='cellColumn '>\r\n                    {returnItemsForCell(f0)}\r\n                </Cell>\r\n                <Cell title={f1} className='cellColumn '>\r\n                    {returnItemsForCell(f1)}\r\n                </Cell>\r\n                <Cell title={f2} className='cellColumn '>\r\n                    {returnItemsForCell(f2)}\r\n                </Cell>\r\n                <Cell title={f3} className='cellColumn'>\r\n                    {returnItemsForCell(f3)}\r\n                </Cell>\r\n                <Cell title={f4} className='cellColumn'>\r\n                    {returnItemsForCell(f4)}\r\n                </Cell>\r\n                <Cell title={f5} className='cellColumn'>\r\n                    {returnItemsForCell(f5)}\r\n                </Cell>\r\n                <Cell title={f6} className='cellColumn'>\r\n                    {returnItemsForCell(f6)}\r\n                </Cell>\r\n                <Cell title={f7} className='cellColumn'>\r\n                    {returnItemsForCell(f7)}\r\n                </Cell>\r\n\r\n            </div>\r\n                <div className={\"cellFlow\"}>\r\n                    <Cell title={g0} className='cellColumn '>\r\n                        {returnItemsForCell(g0)}\r\n                    </Cell>\r\n                    <Cell title={g1} className='cellColumn '>\r\n                        {returnItemsForCell(g1)}\r\n                    </Cell>\r\n                    <Cell title={g2} className='cellColumn '>\r\n                        {returnItemsForCell(g2)}\r\n                    </Cell>\r\n                    <Cell title={g3} className='cellColumn'>\r\n                        {returnItemsForCell(g3)}\r\n                    </Cell>\r\n                    <Cell title={g4} className='cellColumn'>\r\n                        {returnItemsForCell(g4)}\r\n                    </Cell>\r\n                    <Cell title={g5} className='cellColumn'>\r\n                        {returnItemsForCell(g5)}\r\n                    </Cell>\r\n                    <Cell title={g6} className='cellColumn'>\r\n                        {returnItemsForCell(g6)}\r\n                    </Cell>\r\n                    <Cell title={g7} className='cellColumn'>\r\n                        {returnItemsForCell(g7)}\r\n                    </Cell>\r\n\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Cell title={e0} className='cellColumn eventTeamCell'>\r\n                    {returnItemsForCell(e0)}\r\n                </Cell>\r\n            </div>\r\n                <div className={classes.companyBankFlex}>\r\n                    <div className={classes.bankFlex}>\r\n\r\n                    </div>\r\n                    <div className={\"teamBank\"}>\r\n                        {mapBank()}\r\n                    </div>\r\n                </div>\r\n            <div className={\"flowTeam\"}>\r\n                <div className={\"cellFlow  lowerTeam\"}>\r\n                    <Cell title={h0} className='cellColumn '>\r\n                        {returnItemsForCell(h0)}\r\n                    </Cell>\r\n                    <Cell title={h1} className='cellColumn '>\r\n                        {returnItemsForCell(h1)}\r\n                    </Cell>\r\n                    <Cell title={h2} className='cellColumn '>\r\n                        {returnItemsForCell(h2)}\r\n                    </Cell>\r\n                    <Cell title={h3} className='cellColumn'>\r\n                        {returnItemsForCell(h3)}\r\n                    </Cell>\r\n                    <Cell title={h4} className='cellColumn'>\r\n                        {returnItemsForCell(h4)}\r\n                    </Cell>\r\n                    <Cell title={h5} className='cellColumn'>\r\n                        {returnItemsForCell(h5)}\r\n                    </Cell>\r\n                    <Cell title={h6} className='cellColumn'>\r\n                        {returnItemsForCell(h6)}\r\n                    </Cell>\r\n                    <Cell title={h7} className='cellColumn'>\r\n                        {returnItemsForCell(h7)}\r\n                    </Cell>\r\n\r\n                </div>\r\n                <div className={\"cellFlow lowerTeam\"}>\r\n                    <Cell title={i0} className='cellColumn '>\r\n                        {returnItemsForCell(i0)}\r\n                    </Cell>\r\n                    <Cell title={i1} className='cellColumn '>\r\n                        {returnItemsForCell(i1)}\r\n                    </Cell>\r\n                    <Cell title={i2} className='cellColumn '>\r\n                        {returnItemsForCell(i2)}\r\n                    </Cell>\r\n                    <Cell title={i3} className='cellColumn'>\r\n                        {returnItemsForCell(i3)}\r\n                    </Cell>\r\n                    <Cell title={i4} className='cellColumn'>\r\n                        {returnItemsForCell(i4)}\r\n                    </Cell>\r\n                    <Cell title={i5} className='cellColumn'>\r\n                        {returnItemsForCell(i5)}\r\n                    </Cell>\r\n                    <Cell title={i6} className='cellColumn'>\r\n                        {returnItemsForCell(i6)}\r\n                    </Cell>\r\n                    <Cell title={i7} className='cellColumn'>\r\n                        {returnItemsForCell(i7)}\r\n                    </Cell>\r\n\r\n                </div>\r\n            </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React, {useEffect, useRef, useState} from 'react';\nimport {DndProvider, useDrag, useDrop, DragSource, DropTarget, ConnectDragSource, ConnectDropTarget} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {TouchBackend} from \"react-dnd-touch-backend\";\nimport '../../styles/App.css';\nimport {CELL_NAMES} from \"./companyCellNames\";\nimport CompanyCard from \"../CompanyCard\";\nimport {CompanyCard3} from \"../CompanyCard3/SourceBox\";\nimport CarbonEventCard from \"../CarbonEventCard\";\n// import {SourceBox} from \"../TestCellDnd/IsCard\";\nimport {companyDeck} from \"../../constants/companyDeck\";\nimport {TeamHand} from \"../TeamHandLayout/TeamHand\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Box, Typography} from '@material-ui/core'\nimport {carbonDeck} from \"../../constants/carbonDeck\";\nimport {Game} from \"../../Game\";\n\n// const image = \"../img/company/14/background-1.png\"\nconst useStyles = makeStyles(theme => ({\n    bankFlex: {\n        width: 120,\n        height: 120,\n        backgroundColor: \"white\",\n        borderRadius: 10,\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/img/company/Avatar_Bank.svg\"})`,\n        // ${process.env.PUBLIC_URL + '/img/company/cc12.png'}/\n        // position:\"absolute\",\n        alignContent: \"center\",\n        // margin:\"0 auto\",\n        zIndex: 0,\n\n        // border: '1px solid #a49f9f',\n    },\n    companyBankFlex: {\n        display: \"flex\",\n        width: \"1200px\",\n        justifyContent: \"space-around\",\n        marginLeft: \"600px\",\n        marginTop: \"60px\",\n\n    },\n}))\n\n\nconst MovableItem = ({name,idCard, index, currentCellName, moveCardHandler, setItems, G, playerID, item,items, ctx, moves}) => {\n    const changeItemCell = (currentItem, cellName) => {\n        setItems((prevState) => {\n            return prevState.map(e => {\n                return {\n                    ...e,\n                    cell: e.name === currentItem.name ? cellName : e.cell\n                }\n            })\n        });\n    }\n\n    // console.log(G);\n\n    const ref = useRef(null);\n\n    const [, drop] = useDrop({\n        accept: 'companyCard',\n\n        // hover(item: any, monitor) {\n        //     if (!ref.current) {\n        //         return;\n        //     }\n        //     const dragIndex = item.public;\n        //     const hoverIndex = public;\n        //     // Don't replace items with themselves\n        //     if (dragIndex === hoverIndex) {\n        //         return;\n        //     }\n        //     // Determine rectangle on screen\n        //     const hoverBoundingRect = ref.current?.getBoundingClientRect();\n        //     // Get vertical middle\n        //     const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        //     // Determine mouse position\n        //     const clientOffset = monitor.getClientOffset();\n        //     // Get pixels to the top\n        //     const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n        //     // Only perform the move when the mouse has crossed half of the items height\n        //     // When dragging downwards, only move when the cursor is below 50%\n        //     // When dragging upwards, only move when the cursor is above 50%\n        //     // Dragging downwards\n        //     if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        //         return;\n        //     }\n        //     // Dragging upwards\n        //     if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        //         return;\n        //     }\n        //     // Time to actually perform the action\n        //     moveCardHandler(dragIndex, hoverIndex);\n        //     // moves.DiscardCompany(G ,ctx,2);\n        //     // Note: we're mutating the monitor item here!\n        //     // Generally it's better to avoid mutations,\n        //     // but it's good here for the sake of performance\n        //     // to avoid expensive public searches.\n        //     item.public = hoverIndex;\n        // },\n    });\n\n    const [{isDragging}, drag] = useDrag({\n        item: {index,name,idCard, currentCellName, type: 'companyCard'},\n        end: (item, monitor) => {\n\n            const dropResult = monitor.getDropResult();\n            // moves.IncreaseCoin(name,idCard);\n\n\n\n            if (dropResult) {\n                const {name} = dropResult;\n                let playerId = [\"a\", \"b\", \"c\", \"d\", \"k\", \"h\"];\n                let cellId;\n\n                for (let j = 0; j < 6; j++) {\n                    for (let l = 0; l < 18; l++) {\n                        cellId = playerId[j].concat(l);\n                        switch (name) {\n                            case cellId :\n                                changeItemCell(item, cellId);\n                                return;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        },\n\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n\n    const onUpdate = () =>{\n\n\n\n        // if (items !== G.companyDeck) {\n        //     setItems(G.companyDeck)\n        //\n        // }\n\n    }\n\n    // const opacity = isDragging ? 0 : 1;\n    //\n\n\n    drag(drop(ref));\n\n\n\n\n    return (\n        <div ref={ref}>\n            <CompanyCard3 setItems={setItems} ctx={ctx} G={G} item={item} name={name} idCard={idCard} playerID={playerID} moves={moves}/>\n\n        </div>\n    )\n\n}\n\nconst Cell = ({children, className, name, title, G, ctx, ID}) => {\n    const [{isOver, canDrop}, drop] = useDrop({\n        accept: \"companyCard\",\n        drop: () => ({name: title}),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n        }),\n\n    });\n\n\n    return (\n        <div ref={drop} className={className}>\n            {/* <p>{title}</p> */}\n            {children}\n        </div>\n    )\n}\n\n// const bidCoinCell = ({children, title}) => {\n//     const [{isOver, canDrop}, drop] = useDrop({\n//         accept: 'bid' || \"\",\n//         drop: () => ({name: title}),\n//         collect: (monitor) => ({\n//             isOver: monitor.isOver(),\n//             canDrop: monitor.canDrop(),\n//         }),\n//\n//     });\n//\n//\n//     return (\n//         <div ref={drop}>\n//             {/* <p>{title}</p> */}\n//             {children}\n//         </div>\n//     )\n// }\n\n\nexport const PlayerHand = ({G, ctx, moves, ID, children}) => {\n\n    const [items, setItems] = useState(G.companyDeck);\n\n    //TODO: this stops the board from update. Change to move cards. Needs to be fixed\n\n    // if (items != G.companyDeck){\n    //     setItems(G.companyDeck)\n    // }\n\n\n    // console.log(items);\n    const classes = useStyles(carbonDeck);\n    // G.companyDeck[1].cell = CELL_NAMES.b6\n\n    const isMobile = window.innerWidth < 600;\n\n    const card = G.players[0].handCompanyDeck[2];\n\n    const moveCardHandler = (dragIndex, hoverIndex, G) => {\n\n        const dragItem = items[dragIndex];\n        // console.log(items);\n        if (dragItem) {\n\n            // moves.InitialDraw();\n\n            setItems((prevState => {\n                const copiedStateArray = [...prevState];\n\n                // remove item by \"hoverIndex\" and put \"dragItem\" instead\n                const prevItem = copiedStateArray.splice(hoverIndex, 1, dragItem);\n\n                // remove item by \"dragIndex\" and put \"prevItem\" instead\n                copiedStateArray.splice(dragIndex, 1, prevItem[0]);\n                // setItems(G.companyDeck);\n                return copiedStateArray;\n            }));\n        }\n    };\n\n    const returnItemsForCell = (cellName) => {\n        //\n        // if (items != G.companyDeck){\n        //     setItems(G.companyDeck)\n        // }\n        // console.log(items);\n        return items.filter((item) => item.cell === cellName).map((item, index) => (\n            <MovableItem idCard={item.idValue}\n                         name={item.name}\n                         currentCellName={item.cell}\n                         setItems={setItems}\n                         index={index}\n                         moveCardHandler={moveCardHandler}\n                         item={item}\n                         items={items}\n                         G={G}\n                         playerID={ID}\n                         ctx={ctx}\n                         moves={moves}\n            />\n        ))\n    };\n\n    const {\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n        a9,\n        a0,\n        b1,\n        b2,\n        b3,\n        b4,\n        b5,\n        b6,\n        b7,\n        b8,\n        b9,\n        b0,\n        c1,\n        c2,\n        c3,\n        c4,\n        c5,\n        c6,\n        c7,\n        c8,\n        c9,\n        c0,\n        d1,\n        d2,\n        d3,\n        d4,\n        d5,\n        d6,\n        d7,\n        d8,\n        d9,\n        d0,\n        k0,\n        k1,\n        k2,\n        k3,\n        k4,\n        k5,\n        k6,\n        k7,\n        k8,\n        k9,\n        k10,\n        k11,\n        k12,\n        k13,\n        k14,\n        k15,\n        k16,\n        k17,\n        k18,\n        h1,\n    } = CELL_NAMES;\n\n    const mapCompanyBank = () => {\n        let cellId;\n        let bankId = [\"k\"];\n        let cellsList = [];\n\n        for (let i = 0; i < 18; i++) {\n            cellId = bankId[0].concat(i);\n            cellsList.push(\n                <Cell title={cellId} className={\"column testBorder\"}>\n                    {returnItemsForCell(cellId, G)}\n                </Cell>\n            )\n\n        }\n        return cellsList;\n    }\n    const bidCoinCellPlace = ({moves, children, ...props}) => {\n\n\n        return (\n            <div className={\"bidCoinCell\"}>\n\n                <Cell className={\"column\"}></Cell>\n                {/*<div>bid: {G.bid}</div>*/}\n                {children}\n            </div>\n        )\n\n\n    };\n    const bidCell = (moves) => {\n        let cellIdBid = \"h1\";\n        return (\n            <div className={\"bidContainer\"}>\n                <Cell title={cellIdBid} className={\"column testBorder\"}>\n                    {returnItemsForCell(cellIdBid, G)}\n                </Cell>\n                {bidCoinCellPlace(moves, children)}\n                {/*<Cell title={cellIdBid} className={\"cellColumn testBorder\"}>*/}\n                {/*    {returnItemsForCell(cellIdBid)}*/}\n                {/*</Cell>*/}\n                {/*<Cell title={cellIdBid} className={\"column testBorder\"}>*/}\n                {/*    {returnItemsForCell(cellIdBid)}*/}\n                {/*</Cell>*/}\n                {/*<Cell title={cellIdBid} className={\"column testBorder\"}>*/}\n                {/*    {returnItemsForCell(cellIdBid)}*/}\n                {/*</Cell>*/}\n            </div>\n\n        )\n    }\n\n\n// TODO: map handcompany into cells\n    return (\n        <>\n            <div className={\"companyBlock\"}>\n                <div className={\"companyFlex\"}>\n                    <div className=\"container\">\n                        <Cell title={a0} className='column '>\n                            {returnItemsForCell(a0)}\n                        </Cell>\n                        <Cell title={a1} className='column '>\n                            {returnItemsForCell(a1)}\n                        </Cell>\n                        <Cell title={a2} className='column '>\n                            {returnItemsForCell(a2, G)}\n                        </Cell>\n                        <Cell title={a3} className='column'>\n                            {returnItemsForCell(a3, G)}\n                        </Cell>\n                        <Cell title={a4} className='column'>\n                            {returnItemsForCell(a4, G)}\n                        </Cell>\n                        <Cell title={a5} className='column'>\n                            {returnItemsForCell(a5, G)}\n                        </Cell>\n                        <Cell title={a6} className='column'>\n                            {returnItemsForCell(a6, G)}\n                        </Cell>\n                        <Cell title={a7} className='column'>\n                            {returnItemsForCell(a7, G)}\n                        </Cell>\n                        <Cell title={a8} className='column'>\n                            {returnItemsForCell(a8, G)}\n                        </Cell>\n                        <Cell title={a9} className='column'>\n                            {returnItemsForCell(a9, G)}\n                        </Cell>\n                    </div>\n                    <div className={\"eventCard\"}>\n                        <CarbonEventCard/>\n                    </div>\n                    <div className=\"container\">\n                        <Cell title={b0} className='column'>\n                            {returnItemsForCell(b0, G)}\n                        </Cell>\n                        <Cell title={b1} className='column'>\n                            {returnItemsForCell(b1, G)}\n                        </Cell>\n                        <Cell title={b2} className='column'>\n                            {returnItemsForCell(b2, G)}\n                        </Cell>\n                        <Cell title={b3} className='column'>\n                            {returnItemsForCell(b3, G)}\n                        </Cell>\n                        <Cell title={b4} className='column'>\n                            {returnItemsForCell(b4, G)}\n                        </Cell>\n                        <Cell title={b5} className='column'>\n                            {returnItemsForCell(b5, G)}\n                        </Cell>\n                        <Cell title={b6} className='column'>\n                            {returnItemsForCell(b6, G)}\n                        </Cell>\n                        <Cell title={b7} className='column'>\n                            {returnItemsForCell(b7, G)}\n                        </Cell>\n                        <Cell title={b8} className='column'>\n                            {returnItemsForCell(b8, G)}\n                        </Cell>\n                        <Cell title={b9} className='column'>\n                            {returnItemsForCell(b9, G)}\n                        </Cell>\n                    </div>\n                </div>\n            </div>\n\n\n            <div className={classes.companyBankFlex}>\n                <div className={classes.bankFlex}>\n\n                </div>\n                <div className={\"companyBank\"}>\n                    {mapCompanyBank()}\n                </div>\n            </div>\n            <div className={\"companyBlock lower\"}>\n                <div className={\"companyFlex\"}>\n                    <div className=\"container\">\n                        <Cell title={c0} className='column '>\n                            {returnItemsForCell(c0, G)}\n                        </Cell>\n                        <Cell title={c1} className='column '>\n                            {returnItemsForCell(c1, G)}\n                        </Cell>\n                        <Cell title={c2} className='column '>\n                            {returnItemsForCell(c2, G)}\n                        </Cell>\n                        <Cell title={c3} className='column'>\n                            {returnItemsForCell(c3, G)}\n                        </Cell>\n                        <Cell title={c4} className='column'>\n                            {returnItemsForCell(c4, G)}\n                        </Cell>\n                        <Cell title={c5} className='column'>\n                            {returnItemsForCell(c5, G)}\n                        </Cell>\n                        <Cell title={c6} className='column'>\n                            {returnItemsForCell(c6, G)}\n                        </Cell>\n                        <Cell title={c7} className='column'>\n                            {returnItemsForCell(c7, G)}\n                        </Cell>\n                        <Cell title={c8} className='column'>\n                            {returnItemsForCell(c8, G)}\n                        </Cell>\n                        <Cell title={c9} className='column'>\n                            {returnItemsForCell(c9, G)}\n                        </Cell>\n                    </div>\n                    {bidCell(moves)}\n                    <div className=\"container\">\n                        <Cell title={d0} className='column '>\n                            {returnItemsForCell(d0, G)}\n                        </Cell>\n                        <Cell title={d1} className='column '>\n                            {returnItemsForCell(d1, G)}\n                        </Cell>\n                        <Cell title={d2} className='column '>\n                            {returnItemsForCell(d2, G)}\n                        </Cell>\n                        <Cell title={d3} className='column'>\n                            {returnItemsForCell(d3, G)}\n                        </Cell>\n                        <Cell title={d4} className='column'>\n                            {returnItemsForCell(d4, G)}\n                        </Cell>\n                        <Cell title={d5} className='column'>\n                            {returnItemsForCell(d5, G)}\n                        </Cell>\n                        <Cell title={d6} className='column'>\n                            {returnItemsForCell(d6, G)}\n                        </Cell>\n                        <Cell title={d7} className='column'>\n                            {returnItemsForCell(d7, G)}\n                        </Cell>\n                        <Cell title={d8} className='column'>\n                            {returnItemsForCell(d8, G)}\n                        </Cell>\n                        <Cell title={d9} className='column'>\n                            {returnItemsForCell(d9, G)}\n                        </Cell>\n                    </div>\n                </div>\n            </div>\n            {children}\n        </>\n    );\n}\n","// import { useEffect, useState } from 'react';\n// import { BoardSquare } from './BoardSquare';\n// import CompanyCard from \"../CompanyCard\";\n// import {IsCard} from \"./IsCard\";\n// import {Square} from \"./Square\";\n//\n// /** Styling properties applied to the board element */\n// const boardStyle = {\n//     width: '408px',\n//     height: '200px',\n//     display: 'flex',\n//     flexWrap: 'wrap',\n// };\n// /** Styling properties applied to each square element */\n// const squareStyle = { width: '100%', height: '100%' };\n// /**\n//  * The chessboard component\n//  * @param props The react props\n//  */\n// export const Board = ({G}) => {\n//\n//     let handCards = G.players[0].handCompanyDeck\n//     // console.log(handCards);\n//\n//     let topCard;\n//\n//     function renderSquare() {\n//\n//                 return (\n//                     <div >\n//                         <BoardSquare G={G}/>\n//                     </div>\n//                 );\n//     }\n//\n//     const squares = [];\n//\n//     const renderCard = (item) => {\n//\n//         return       <div>\n//                         <BoardSquare G={G} key={item.id.toString()}  >\n//                             <IsCard G={G} item={item}  isCard={!handCards.length} />\n//                         </BoardSquare>\n//                     </div>\n//     }\n//\n//\n//\n//     for (let i = 0; i < 8; i += 1) {\n//         if (!handCards.length){\n//             squares.push(renderSquare());\n//         } else {\n//             // topCard = handCards.shift();\n//             // squares.push(renderCard(topCard));\n//\n//\n//         }\n//\n//\n//     }\n//     //[squares[3],squares[5]] = [squares[5],squares[3]]\n//     // console.log(squares)\n//     //\n//\n//     const [squaresState,setSquaresState] = useState(squares);\n//     // setSquaresState()s\n//     return <div style={boardStyle}>{squaresState}</div>;\n// };\n\nimport React, { Component } from 'react'\nimport { DropTarget, DragSource } from 'react-dnd'\n\n\nexport const ItemTypes = {\n    CATEGORY: 'category-item'\n}\n\nclass CategoryTreeFork extends Component {\n\n    componentWillReceiveProps = (nextProps) => {\n        console.log(\"Next cat props\", nextProps)\n    }\n\n    render(){\n\n        const { connectDragSource, connectDropTarget, isDragging, isOver } = this.props\n        // let { thisCat, childCat, level, dropEvent } = this.props\n\n        return connectDragSource(\n            <div className=\"category-tree-fork\">\n                <div className={`category-list-item level-`}\n                     style={{\n                         opacity: isDragging ? 0.5 : 1,\n                         backgroundColor: isOver ? \"red\" : \"silver\",\n                         height: \"100px\"\n                     }}>\n                    {/*{thisCat.name}*/}\n                </div>\n            </div>\n        )\n    }\n}\n\n/* get dragged */\nconst sourceSpec = {\n    beginDrag(props){\n        return {props }\n    }\n}\n\nconst sourceCollect  = (connect, monitor) => {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    }\n}\n\n\n/* get dragged onto */\nconst targetSpec  = {\n    drop(props, monitor, component) {\n        const item = monitor.getItem()\n        console.log(\"me or my friend?\", item)\n    },\n    hover(props, monitor, component){\n        console.log(\"yo what you hoverin there for homie?\")\n    }\n}\n\nconst targetCollect = (connect, monitor) => {\n    return {\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver()\n    }\n}\n\n\nexport default\n    DragSource(ItemTypes.CATEGORY, sourceSpec, sourceCollect)(\n    DropTarget(ItemTypes.CATEGORY, targetSpec, targetCollect)(\nCategoryTreeFork))","import React, {useState} from \"react\";\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n} from \"react-grid-dnd\";\nimport {Box, Grid, Typography} from '@material-ui/core'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport \"../styles/project.css\";\nimport NamePlate from \"./NamePlate\";\nimport CompanyHand from \"./CompanyHand\";\nimport CarbonEventCard from \"./CarbonEventCard\";\nimport TeamCard from \"./TeamCard\";\nimport {IsCard} from \"./TestCellDnd/IsCard\";\nimport {PlayerHand} from \"./CompanyHandLayout/PlayerHand\";\nimport {TeamHand} from \"./TeamHandLayout/TeamHand\";\nimport CategoryTreeFork from \"./TestCellDnd/Board\";\nimport Example from \"./CompanyCard3/example\"\n\n// const useStyles = makeStyles(theme => ({\n//     root:{\n//         width:200,\n//     },\n//     mainSection:   {\n//         // display: \"flex\",\n//         width: \"90px\",\n//         height: 90 ,\n//         borderRadius: 15,\n//         backgroundColor:\"white\",\n//         // border:\"black\",\n//         marginBottom:\"20px\",\n//         cursor:\"pointer\",\n//     },\n//\n//     backImage: card =>( {\n//         backgroundImage:`url(${card.synmain})`,\n//         backgroundPosition: 'center',\n//         backgroundSize: '86%',\n//         backgroundRepeat: 'no-repeat',\n//         height: '100%',\n//         width: '100%',\n//         display: 'block',\n//         margin: 'auto',\n//         // flexDirection:\"column\",\n//\n//         // marginTop: \"2%\",\n//         // marginLeft: \"3%%\",\n//     }),\n//     valuesMain: {},\n//     synergyMain: {},\n//     actualValues:{\n//         display:\"flex\",\n//         justifyContent:'space-between',\n//         width:\"87%\",\n//         height:\"26%\",\n//         marginLeft:\"6%\",\n//         marginTop:\"4%\",\n//         paddingTop:\"6%\",\n//     },\n//     carbonActual: {\n//         backgroundColor: \"black\",\n//         border: \"3px solid grey\",\n//         height: \"90%\",\n//         width: \"27%\",\n//         borderRadius: 50,\n//         marginTop:\"2%\",\n//         // marginLeft:\"6%\",\n//     },\n//\n//     carbonActualText: {\n//         color: \"grey\",\n//         fontSize: \"13pt\",\n//         marginLeft: \"28%\",\n//         marginTop: \"-5%\",\n//         fontWeight:501,\n//     },\n//     valueActual: {\n//         backgroundColor: \"white\",\n//         border: \"3px solid #539bc5\",\n//         height: \"90%\",\n//         width: \"27%\",\n//         borderRadius: 50,\n//         marginTop:\"2%\",\n//         // marginLeft: 104,\n//     },\n//     valueActualText: {\n//         color: \"black\",\n//         fontSize: \"13pt\",\n//         marginLeft: \"28%\",\n//         marginTop: \"-5%\",\n//         fontWeight:501,\n//     },\n//     initialValues:{\n//         display:\"flex\",\n//         justifyContent:\"space-between\",\n//         width:\"36%\",\n//         height:\"17%\",\n//         marginTop:\"12%\",\n//         marginLeft:\"57%\",\n//     },\n//     initialCarbon: {\n//         backgroundColor: \"black\",\n//         border: \"3px solid grey\",\n//         // height: \"100%\",\n//         width: \"34%\",\n//         borderRadius: 50,\n//\n//     },\n//     initialValue: {\n//         backgroundColor: \"white\",\n//         border: \"3px solid #539bc5\",\n//         // height: \"100%\",\n//         width: \"34%\",\n//         borderRadius: 50,\n//\n//     },\n//     initialCarbonText: {\n//         color: \"grey\",\n//         fontSize: \"8pt\",\n//         marginLeft: \"23%\",\n//         marginTop: \"-19%\",\n//         fontWeight:501,\n//     },\n//     initialValueText: {\n//         color: \"black\",\n//         fontSize: \"8pt\",\n//         marginLeft: \"23%\",\n//         marginTop: \"-19%\",\n//         fontWeight:501,\n//     },\n//     synLeft:{\n//         backgroundColor: \"white\",\n//         border: \"2px solid #539bc5\",\n//         height: \"10%\",\n//         width: \"10%\",\n//         marginTop: \"-18%\",\n//         marginLeft: \"9%\",\n//         borderRadius: 50,\n//     },\n//     synMid:{\n//         backgroundColor: \"white\",\n//         border: \"2px solid #539bc5\",\n//         height: \"10%\",\n//         borderRadius:50,\n//         width: \"10%\",\n//         marginTop: \"-21%\",\n//         marginLeft: \"34%\",\n//\n//\n//     },\n//     synLeftText:{\n//         color: \"black\",\n//         fontSize: \"6pt\",\n//         marginLeft: \"1%\",\n//         marginTop: \"-5%\",\n//         fontWeight:501,\n//\n//     },\n//     synMidText:{\n//         // fontWeight:501,\n//         color: \"black\",\n//         fontSize: \"6pt\",\n//         marginLeft: \"1%\",\n//         marginTop: \"-5%\",\n//         fontWeight:501,\n//\n//     },\n//     companyName:{\n//         marginTop: \"30.5%\",\n//         marginLeft:\"8.5%\",\n//         fontSize:\"8pt\",\n//\n//     },\n//     auction:{\n//         textAlign:\"center\",\n//         marginTop:\"17%\",\n//         fontSize:20,\n//     },\n//     bid:{\n//         backgroundColor: \"darkgreen\",\n//         border: \"5px solid white\",\n//         zIndex:0,\n//     },\n// }));\n\n\nexport const Card = ({G, ctx,moves,...props}) => {\n    // console.log(G);\n    // const playerID = [\"1\",\"2\",\"3\",\"4\"]\n    // console.log(G.players[0].handCompanyDeck);\n    // const classes = useStyles();\n    //    const [items, setItems] = React.useState({\n    //     first: G.players[0].handCompanyDeck,\n    //     second: G.players[1].handCompanyDeck,\n    //     third: G.players[2].handCompanyDeck,\n    //     fourth: G.players[3].handCompanyDeck,\n    //        main:G.companyDeck,\n    //        firstTeam: G.players[0].handTeamDeck,\n    //        secondTeam: G.players[1].handTeamDeck,\n    //        thirdTeam: G.players[2].handTeamDeck,\n    //        fourthTeam: G.players[3].handTeamDeck,\n    //        mainTeam:G.teamDeck,\n    // });\n\n\n    //  const CompanyCard = ({card,key,G}) => {\n    //     const classes = useStyles(card);\n    //\n    //     return (\n    //\n    //         <Box\n    //             className={`${classes.mainSection}`}\n    //         >\n    //\n    //\n    //             <Box className={`${classes.backImage}`}>\n    //                 <Box zIndex={1} className={classes.actualValues}>\n    //\n    //\n    //                     <Box className={classes.carbonActual}>\n    //                         <Typography className={classes.carbonActualText}>{card.actualCarbon}</Typography>\n    //                     </Box>\n    //\n    //\n    //                     <Box className={classes.valueActual}>\n    //                         <Typography className={`${classes.valueActualText} `}>{card.actualValue}</Typography>\n    //                     </Box>\n    //\n    //\n    //                 </Box>\n    //                 <Box zIndex={2} className={classes.initialValues}>\n    //                     <Box className={classes.initialValue}>\n    //                         <Typography className={classes.initialValueText}>{card.initialValue}</Typography>\n    //                     </Box>\n    //                     <Box className={classes.initialCarbon}>\n    //                         <Typography className={classes.initialCarbonText}>{card.initialCarbon}</Typography>\n    //                     </Box>\n    //                 </Box>\n    //\n    //\n    //                 <Box className={classes.synLeft}>\n    //                     <Typography className={classes.synLeftText}>+3</Typography>\n    //                 </Box>\n    //                 <Box className={classes.synMid}>\n    //                     <Typography className={classes.synMidText}>+3</Typography>\n    //                 </Box>\n    //                 <Box className={classes.companyName}>{card.companyName}</Box>\n    //\n    //             </Box>\n    //\n    //         </Box>\n    //\n    //\n    //     );\n    // };\n\n\n    // function onChangeCompany(sourceId, sourceIndex, targetIndex, targetId) {\n    //     if (targetId) {\n    //         const result = move(\n    //             items[sourceId],\n    //             items[targetId],\n    //             sourceIndex,\n    //             targetIndex\n    //         );\n    //         return setItems({\n    //             ...items,\n    //             [sourceId]: result[0],\n    //             [targetId]: result[1]\n    //         });\n    //     }\n    //\n    //     const result = swap(items[sourceId], sourceIndex, targetIndex);\n    //     return setItems({\n    //         ...items,\n    //         [sourceId]: result\n    //     });\n    //     console.log(items);\n    // }\n\n// console.log(player.handCompanyDeck);\n\n\n    return (\n        // <GridContextProvider onChange={onChangeCompany}>\n        <>\n            <Box paddingLeft={\"60px\"} paddingTop={\"60px\"}>\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"1980px\"}>\n                    <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"1860px\"}>\n                        <NamePlate avatarId={1}/>\n                        <Box position={\"absolute\"} >\n                            <TeamHand G={G} ctx={ctx}/>\n                        </Box>\n                        <NamePlate avatarId={2}/>\n                    </Box>\n                    <Box display={\"flex\"}>\n                        {/*<TeamCard />*/}\n                        {/*/!*<TeamCard />*!/*/}\n                        {/*<TeamCard />*/}\n                        {/*<NamePlate/>*/}\n\n                    </Box>\n\n                    {/*<NamePlate/>*/}\n                    {/*<NamePlate/>*/}\n\n                    {/*<Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n                    {/*    <NamePlate G={G} playerId={0} />*/}\n\n                    {/*    <GridDropZone*/}\n                    {/*        className={\"handTeam\"}*/}\n                    {/*        id=\"firstTeam\"*/}\n                    {/*        boxesPerRow={2}*/}\n                    {/*        rowHeight={95}*/}\n                    {/*    >*/}\n                    {/*        {items.firstTeam.map(item => (*/}\n                    {/*            <GridItem key={item.id}>*/}\n                    {/*                <TeamCard G={G} card = {item}/>*/}\n                    {/*            </GridItem>*/}\n                    {/*        ))}*/}\n                    {/*    </GridDropZone>*/}\n                    {/*</Box>*/}\n                    {/*<Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n\n\n                    {/*        <GridDropZone*/}\n                    {/*            className={\"handTeam\"}*/}\n                    {/*            id=\"secondTeam\"*/}\n                    {/*            boxesPerRow={3}*/}\n                    {/*            rowHeight={95}*/}\n                    {/*        >*/}\n                    {/*            {items.secondTeam.map(item => (*/}\n                    {/*                <GridItem key={item.id}>*/}\n                    {/*                    <TeamCard G={G} card = {item}/>*/}\n                    {/*                </GridItem>*/}\n                    {/*            ))}*/}\n                    {/*        </GridDropZone>*/}\n\n\n                    {/*    <NamePlate G={G} playerId={1} />*/}\n                    {/*</Box>*/}\n                </Box>\n                <Box className={\"container1\"} >\n                    {/*<Box width={\"620px\"}  display={\"flex\"} flexWrap={\"wrap\"}  justifyContent={\"space-between\"} >*/}\n\n                    {/*    <PlayerHand G={G} ctx={ctx} ID={0}/>*/}\n\n\n                    {/*</Box>*/}\n\n                    {/*<Box display={\"flex\"}>*/}\n                    {/*    <CarbonEventCard />*/}\n                    {/*        <TeamCard />*/}\n                    {/*</Box>*/}\n\n\n                    {/*<Box width={\"620px\"}   >*/}\n                    {/*    <PlayerHand G={G} ctx={ctx} ID={1}/>*/}\n\n                    {/*</Box>*/}\n                        <Box position={\"absolute\"}>\n                            {/*<Box>*/}\n                            <PlayerHand ID={0} ctx={ctx} moves={moves} G={G} />\n                        </Box>\n\n\n                    {/*<Box  >*/}\n                    {/*    <CarbonEventCard />*/}\n\n                    {/*</Box>*/}\n\n\n                    {/*<GridDropZone*/}\n\n                    {/*    className={\"dropzone\"}*/}\n                    {/*    id=\"second\"*/}\n                    {/*    boxesPerRow={2}*/}\n                    {/*    rowHeight={95}*/}\n                    {/*>*/}\n                    {/*    {items.second.map(item => (*/}\n                    {/*        <GridItem key={item.id}>*/}\n                    {/*                    <CompanyCard card={item} key={item.id}  G={G} />*/}\n                    {/*        </GridItem>*/}\n                    {/*    ))}*/}\n                    {/*</GridDropZone>*/}\n                </Box>\n\n\n                {/*<GridDropZone*/}\n                {/*    className={\"mainTeamDeck\"}*/}\n                {/*    id = \"first\"*/}\n                {/*    boxesPerRow={9}*/}\n                {/*    rowHeight={95}*/}\n                {/*>*/}\n                {/*    {items.main.map(item => (*/}\n                {/*            <GridItem key={item.id}>*/}\n                {/*                <CompanyCard card={item} key={item.id}  G={G}/>*/}\n                {/*            </GridItem>*/}\n                {/*        ))}*/}\n\n                {/*</GridDropZone>*/}\n\n\n                {/*<Box display={\"flex\"} justifyContent={\"space-between\"} className={\"container1\"} mt={\"360px\"}>*/}\n                {/*<Box className={\"dropzone\"}>*/}\n                {/*<GridDropZone*/}\n\n\n                {/*    id=\"third\"*/}\n                {/*    boxesPerRow={2}*/}\n                {/*    rowHeight={95}*/}\n                {/*>*/}\n                {/*    {items.third.map(item => (*/}\n                {/*        <GridItem key={item.id}>*/}\n\n                {/*            <CompanyCard card={item} key={item.id}  G={G}/>*/}\n\n                {/*        </GridItem>*/}\n                {/*    ))}*/}\n                {/*</GridDropZone>*/}\n                {/*</Box>*/}\n\n                {/*<Box width={\"620px\"}   >*/}\n                {/*    <PlayerHand G={G} ctx={ctx} ID={2}  />*/}\n                {/*</Box>*/}\n\n                {/*<Box width={\"620px\"}   >*/}\n                {/*    <PlayerHand G={G} ctx={ctx} ID={3}/>*/}\n                {/*</Box>*/}\n                {/*<GridDropZone*/}\n\n                {/*    className={\"dropzone\"}*/}\n                {/*    id=\"fourth\"*/}\n                {/*    boxesPerRow={2}*/}\n                {/*    rowHeight={95}*/}\n                {/*>*/}\n                {/*    {items.fourth.map(item => (*/}\n                {/*        <GridItem key={item.id}>*/}\n                {/*            <CompanyCard card={item} key={item.id}  G={G} />*/}\n                {/*        </GridItem>*/}\n                {/*    ))}*/}\n                {/*</GridDropZone>*/}\n                {/*</Box>*/}\n                <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"1980px\"}>\n                    {/*<Box display={\"flex\"} width={\"1980px\"}>*/}\n                    {/*    <NamePlate/>*/}\n                    {/*    <TeamCard/>*/}\n                    {/*    <TeamCard/>*/}\n                    {/*    <TeamCard/>*/}\n                    {/*</Box>*/}\n                    <Box display={\"flex\"}>\n                        {/*<TeamCard />*/}\n                        {/*/!*<TeamCard />*!/*/}\n                        {/*<TeamCard />*/}\n                        {/*<NamePlate/>*/}\n\n                    </Box>\n                    <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"1900px\"} mt={75} mr={15}>\n                    <NamePlate avatarId={4} />\n                    <NamePlate avatarId={3} />\n                    </Box>\n                    {/*<Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n                    {/*    <NamePlate G={G} playerId={0} />*/}\n\n                    {/*    <GridDropZone*/}\n                    {/*        className={\"handTeam\"}*/}\n                    {/*        id=\"firstTeam\"*/}\n                    {/*        boxesPerRow={2}*/}\n                    {/*        rowHeight={95}*/}\n                    {/*    >*/}\n                    {/*        {items.firstTeam.map(item => (*/}\n                    {/*            <GridItem key={item.id}>*/}\n                    {/*                <TeamCard G={G} card = {item}/>*/}\n                    {/*            </GridItem>*/}\n                    {/*        ))}*/}\n                    {/*    </GridDropZone>*/}\n                    {/*</Box>*/}\n                    {/*<Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n\n\n                    {/*        <GridDropZone*/}\n                    {/*            className={\"handTeam\"}*/}\n                    {/*            id=\"secondTeam\"*/}\n                    {/*            boxesPerRow={3}*/}\n                    {/*            rowHeight={95}*/}\n                    {/*        >*/}\n                    {/*            {items.secondTeam.map(item => (*/}\n                    {/*                <GridItem key={item.id}>*/}\n                    {/*                    <TeamCard G={G} card = {item}/>*/}\n                    {/*                </GridItem>*/}\n                    {/*            ))}*/}\n                    {/*        </GridDropZone>*/}\n\n\n                    {/*    <NamePlate G={G} playerId={1} />*/}\n                    {/*</Box>*/}\n                </Box>\n\n                {/*<Box marginTop={1} display={\"flex\"} justifyContent={\"space-between\"} width={\"1525px\"}>*/}\n                {/*    <Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n                {/*        <NamePlate G={G} playerId={2} />*/}\n\n                {/*            <GridDropZone*/}\n                {/*                className={\"handTeam\"}*/}\n                {/*                id=\"thirdTeam\"*/}\n                {/*                boxesPerRow={3}*/}\n                {/*                rowHeight={95}*/}\n                {/*            >*/}\n                {/*                {items.thirdTeam.map(item => (*/}\n                {/*                    <GridItem key={item.id}>*/}\n                {/*                        <TeamCard G={G} card = {item}/>*/}\n                {/*                    </GridItem>*/}\n                {/*                ))}*/}\n                {/*            </GridDropZone>*/}\n\n                {/*    </Box>*/}\n                {/*    <Box display={\"flex\"} justifyContent={\"space-between\"} width={185}>*/}\n\n                {/*            <GridDropZone*/}\n                {/*                className={\"handTeam handTeam1\"}*/}\n                {/*                id=\"fourthTeam\"*/}\n                {/*                boxesPerRow={3}*/}\n                {/*                rowHeight={95}*/}\n                {/*            >*/}\n                {/*            {items.fourthTeam.map(item => (*/}\n                {/*                <GridItem key={item.id}>*/}\n                {/*                    <TeamCard G={G} card = {item}/>*/}\n                {/*                </GridItem>*/}\n                {/*            ))}*/}\n                {/*            </GridDropZone>*/}\n\n                {/*        <NamePlate G={G} playerId={3} />*/}\n                {/*    </Box>*/}\n                {/*</Box>*/}\n\n                {/*<Box  position={\"absolute\"} marginTop={\"-208px\"} borderRadius={20} width={180} height={90} className={classes.bid} marginLeft={\"45%\"}>*/}\n                {/*    <Typography className={classes.auction}>Auction</Typography>*/}\n                {/*</Box>*/}\n            </Box>\n\n            {/*<Example/>*/}\n\n        </>\n\n    );\n}\n\n\n\n","import React,{useState} from 'react';\nimport '../styles/style.scss';\n\n\n// import 'nprogress/nprogress';\n\n// class App extends React.Component {\n//     render() {\n//         return (\n//             <div className=\"page-container\">\n//\n//                 <BlogCard />\n//                 <footer>\n//                     Image credit: <a href=\"https://78.media.tumblr.com/d98fb931adb117c70f0dbced9e947520/tumblr_pe582mbWip1tlgv32o1_1280.png\">8pxl on Tumblr</a>\n//                 </footer>\n//\n//         )\n//     }\n// }\nlet counter = 0;\nexport class CarbonEvent2 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { flipped: false };\n        this.flip = this.flip.bind(this);\n    }\n\n\n    flip = () => {\n        this.setState({ flipped: !this.state.flipped });\n\n\n    }\n    flip2 = () =>{\n        this.setState({ flipped: !this.state.flipped });\n    };\n    render() {\n        return (\n\n            <div className=\"page-container\">\n            <div onClick={this.flip} onClick={this.flip2} className={\"card-container\" + (this.state.flipped ? \" flipped\" : \"\")}>\n\n                <Front G={this.props.G} ctx={this.props.ctx} />\n                <Back img={\"../../public/img/carbonevent/carbonEventBack.png\"} />\n            </div>\n    </div>\n        )\n    }\n}\n\nclass Front extends React.Component {\n    render() {\n        return (\n            <div className=\"front\">\n                <ImageArea />\n                <MainArea G={this.props.G} ctx={this.props.ctx} />\n            </div>\n        )\n    }\n}\n\nclass Back extends React.Component {\n    render() {\n        return (\n            <div className={\"back\"} >\n                <img src={this.props.img} alt=\"backcarbon\"/>\n            </div>\n        )\n    }\n}\n\nclass ImageArea extends React.Component {\n    render() {\n        return (\n            <div className=\"image-container\">\n                {/*<img className=\"card-image\" src=\"https://78.media.tumblr.com/d98fb931adb117c70f0dbced9e947520/tumblr_pe582mbWip1tlgv32o1_1280.png\"></img>*/}\n                <h1 className=\"title\">An example event card</h1>\n            </div>\n        )\n    }\n\n}\n\nclass MainArea extends React.Component {\n    render() {\n        return (\n            <div className=\"main-area\">\n                <div className=\"blog-post\">\n                    <p>{this.props.G.currentCarbon[0].event1.id[0].toString()}</p>\n\n\n                </div>\n\n            </div>\n        )\n    }\n}\n","import React, { useEffect } from \"react\";\n\nimport 'gridstack/dist/gridstack.min.css';\nimport { GridStack } from 'gridstack';\n// THEN to get HTML5 drag&drop\nimport 'gridstack/dist/h5/gridstack-dd-native';\n\nfunction Doit() {\n    // _________________________________________________\n    // Initialize Gridstack inside useEffect so that DOM is rendered when its initialized\n    // _________________________________________________\n    useEffect(() => {\n        let grid = GridStack.init();\n    });\n    // _________________________________________________\n    // _________________________________________________\n\n    return (\n        <div className=\"App\">\n            <div class=\"grid-stack\">\n                <div class=\"grid-stack-item border-dark\" data-gs-width=\"4\" data-gs-height=\"4\">\n                    <div class=\"grid-stack-item-content\">Item 1</div>\n                </div>\n                <div class=\"grid-stack-item border-dark\" data-gs-width=\"4\" data-gs-height=\"4\">\n                    <div class=\"grid-stack-item-content\">Item 2</div>\n                </div>\n                <div class=\"grid-stack-item border-dark\" data-gs-width=\"4\" data-gs-height=\"4\">\n                    <div class=\"grid-stack-item-content\">Item 3</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Doit;","import React, { useCallback, useRef, useState } from 'react';\nimport CompanyCard from \"./components/CompanyCard\";\nimport {Box,Typography,Button, Grid} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {currentId} from \"./Game\";\nimport { DndProvider } from 'react-dnd'\n\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {TouchBackend} from \"react-dnd-touch-backend\";\nimport {companyDeck} from \"./constants/companyDeck\";\nimport CompanyStack from \"./components/CompanyStack\";\nimport NamePlate from \"./components/NamePlate\";\nimport {number} from \"prop-types\";\nimport {DragItem} from \"./components/DragItem\";\nimport {Card} from \"./components/Card\";\nimport CarbonEventCard from \"./components/CarbonEventCard\";\nimport {CarbonEvent2} from \"./components/CarbonEventCard2\";\nimport TeamCard from \"./components/TeamCard\";\nimport CompanyHand from \"./components/CompanyHand\";\nimport Doit from \"./components/Doit\";\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n} from \"react-grid-dnd\";\nimport {Board} from \"./components/TestCellDnd/Board\";\nimport {PlayerHand} from \"./components/CompanyHandLayout/PlayerHand\";\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    bid:{\n        backgroundColor: \"green\",\n        border: \"5px solid white\",\n        zIndex:2,\n    },\n    background:{\n        height:\"1200px\",\n        width:\"1980px\",\n        margin:90,\n        backgroundImage:`url(${process.env.PUBLIC_URL + '/img/mat_clean.svg'})`,\n        backgroundPosition: 'center',\n        backgroundSize: '100%',\n        backgroundRepeat: 'no-repeat',\n\n        display: 'block',\n\n    },\n    auction:{\n        textAlign:\"center\",\n        marginTop:\"20%\",\n        fontSize:40,\n    },\n}));\n\nexport const NZGBoard = ({G,ctx,...props }) => {\n\n    const classes = useStyles();\n    const isMobile = window.innerWidth < 600;\n\n\n    // const onDraw = useCallback(() => {\n    //     // moves.InitialDraw();\n    //      // setPlayerId1(ctx.currentPlayer);\n    //      console.log(playerId1);\n    //\n    //      if (ctx.currentPlayer.toString() === \"0\")\n    //      {\n    //         setPlayerId1(ctx.currentPlayer);\n    //\n    //     } if (ctx.currentPlayer.toString() === \"1\")\n    //     {\n    //         setPlayerId2(ctx.currentPlayer);\n    //\n    //     } if ( ctx.currentPlayer.toString() === \"2\")\n    //     {\n    //         setPlayerId3(ctx.currentPlayer);\n    //     }if ( ctx.currentPlayer.toString() === \"3\")\n    //     {\n    //         setPlayerId4(ctx.currentPlayer);\n    //     // moves,setHidden1,hidden1,hidden2,hidden3,hidden4,cardId1,cardId2,cardId3,cardId4,playerId1,playerId2,playerId3,playerId4,ctx,G,actualCard1,actualCard2,actualCard3,actualCard4\n    //     }\n    //\n    // }, [moves,G,ctx,playerId1,playerId2,playerId3,playerId4]);\n\n    // function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n    //     if (targetId) {\n    //         const result = move(\n    //             items[sourceId],\n    //             items[targetId],\n    //             sourceIndex,\n    //             targetIndex\n    //         );\n    //         return setItems({\n    //             ...items,\n    //             [sourceId]: result[0],\n    //             [targetId]: result[1]\n    //         });\n    //     }\n    //\n    //     const result = swap(items[sourceId], sourceIndex, targetIndex);\n    //     return setItems({\n    //         ...items,\n    //         [sourceId]: result\n    //     });\n    // }\n\n    return(\n        <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n\n        <div className={classes.background}>\n                {/*        <Box     width={\"100%\"} >*/}\n                {/*    <Box display={\"flex\"} justifyContent={\"space-between\"} width={\"100%\"} >*/}\n                {/*        <NamePlate G={G} playerId={0} />*/}\n                {/*        <NamePlate G={G} playerId={1} />*/}\n                {/*    </Box>*/}\n                {/*    /!*{*!/*/}\n                {/*    /!*    (playerId1.toString()) >= \"0\"  ? <CompanyStack G={G} playerId={playerId1} ctx={ctx} moves={moves} />  : null*!/*/}\n                {/*    /!*}*!/*/}\n\n                {/*    /!*{*!/*/}\n                {/*    /!*    (playerId2.toString()) >= \"1\"  ? <CompanyStack G={G} playerId={playerId2} ctx={ctx} moves={moves} />  : null*!/*/}\n                {/*    /!*}*!/*/}\n                {/*    <Box display={\"flex\"} justifyContent={\"space-between\"}>*/}\n                {/*        <CompanyHand G={G} playerId={0} ctx={ctx} moves={moves}/>*/}\n                {/*        <CompanyHand G={G} playerId={1} ctx={ctx} moves={moves}/>*/}\n                {/*    </Box>*/}\n                {/*    <Box display={\"flex\"} justifyContent={\"space-around\"}>*/}\n                {/*        <CarbonEvent2 G={G} ctx={ctx} />*/}\n\n                {/*        <TeamCard />*/}\n\n                {/*    </Box>*/}\n\n                {/*        <Box  position={\"fixed\"} marginTop={40} borderRadius={50} width={240} height={170} className={classes.bid} marginLeft={\"40%\"}>*/}\n                {/*        <Typography className={classes.auction}>Auction</Typography>*/}\n                {/*        </Box>*/}\n\n\n\n\n                {/*</Box>*/}\n\n\n                {/*<Box display={\"flex\"} justifyContent={\"space-between\"} width={\"1505px\"} marginTop={16} >*/}\n                {/*    <CompanyHand G={G} playerId={2} ctx={ctx} moves={moves}/>*/}\n                {/*    <CompanyHand G={G} playerId={3} ctx={ctx} moves={moves}/>*/}\n                {/*    </Box>*/}\n                {/*    <Box marginTop={3} display={\"flex\"} justifyContent={\"space-between\"} width={\"100%\"}>*/}\n                {/*        <NamePlate G={G} playerId={2} />*/}\n                {/*        <NamePlate G={G} playerId={3} />*/}\n                {/*    </Box>*/}\n\n            {/*<DragItem/>*/}\n\n\n\n\n            <Card G={G} ctx={ctx} moves={props.moves}/>\n\n            {/* <TestBoardDnd G={G}/> */}\n            {/*<Board G={G}/>*/}\n            {/*<PlayerHand G={G}/>*/}\n\n    </div>\n     </DndProvider>\n\n    )\n};\n","import React from \"react\";\nimport {Client} from \"boardgame.io/react\";\n// import { Local } from \"boardgame.io/multiplayer\"; //TODO: Multiplayer\nimport {NZGBoard} from \"./NZGBoard\";\nimport {Game} from \"./Game.js\";\nimport { Debug } from 'boardgame.io/debug';\n\n\n\nconst App = Client({\n    game: Game,\n    board: NZGBoard,\n    numPlayers: 4,\n    debug:false,\n\n});\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import \"./styles/project.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}